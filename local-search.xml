<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Chrome 调试技巧</title>
    <link href="/2024/02/21/Chrome%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/02/21/Chrome%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一些好用的调试技巧</p></blockquote><h2 id="暂停-UI-在-Hover-状态下的展示结果"><a href="#暂停-UI-在-Hover-状态下的展示结果" class="headerlink" title="暂停 UI 在 Hover 状态下的展示结果"></a>暂停 UI 在 Hover 状态下的展示结果</h2><p>场景举例：比如检查一个 Tooltip。一般情况下，在右击并选择检查时，元素已经消失了，那么该怎么检查 hover 状态下的元素呢？</p><ol><li>首先切换到 Source 面板</li><li>显示 ToolTip</li><li>使用快捷键 F8 或 command + ，使 Source 面板打开断点调试状态</li><li>回到 Elements 面板，就可以像通常一样去检查元素了</li></ol><h2 id="快速定位样式来源"><a href="#快速定位样式来源" class="headerlink" title="快速定位样式来源"></a>快速定位样式来源</h2><p>一个节点上的样式可能会受多处代码影响，computed style 能够查看真正使它生效的 css 样式。在 computerd 面板找到要查看的属性，点击属性前面箭头即可查看和修改属性</p><h2 id="调试选中元素"><a href="#调试选中元素" class="headerlink" title="调试选中元素"></a>调试选中元素</h2><p>现在 Elements 面板中，使用箭头选中 html 节点。再切换到 console ，输入 $0 得到当前节点的饮用，依次， 1 ** 是上一个选择的节点的引用，最多到 4</p><h2 id="docuemnt-querySelector-和-document-querySelectorAll-的快捷使用"><a href="#docuemnt-querySelector-和-document-querySelectorAll-的快捷使用" class="headerlink" title="docuemnt.querySelector 和 document.querySelectorAll 的快捷使用"></a>docuemnt.querySelector 和 document.querySelectorAll 的快捷使用</h2><p>在 console 控制台，$ 是 docuemnt.querySelector 的别名，$$ 是 document.querySelectorAll 的别名</p><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p>copy(myArray) 能够把 console 中的变量复制到剪贴板，对于数组、对象很实用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>antv-x6</title>
    <link href="/2023/11/29/antv-x6/"/>
    <url>/2023/11/29/antv-x6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>业务中绘制工作流使用到了 x6，最初接触时由于排期问题写的过急，后面使用频次增加，逐渐发现可优化的点和可实现的场景，写下来简单记录一下点，本文偏于功能详细介绍，不包括详细 demo。</p></blockquote><span id="more"></span> <blockquote><p>另外总结：开发时还是要多看官方文档，静下心来，静下心来，静下心来！</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>是一款图编辑引擎，可以快速搭建流程图、节点编辑图等，<a href="https://antv-x6.gitee.io/zh/docs/tutorial/basic/cell">官方文档</a></p><ul><li>支持使用 SVG&#x2F;HTML&#x2F;React&#x2F;Vue 定制节点样式和交互</li><li>内置图编辑配套拓展，包括框选、小地图等</li><li>事件体系完善，可以监听处理点击、hover 事件等</li></ul><blockquote><p>开发前可以先浏览<a href="https://antv-x6.gitee.io/zh/examples/gallery">官方 demo</a>，有比较多的业务场景案例</p></blockquote><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li>需要先创建一个容纳 x6 画图的容器，可以是一个 div 标签</li><li>准备节点、连线数据</li><li>创建画布 Graph，画布支持背景、网格、缩放、平移，另外还支持背景图片配置</li><li>在画布上渲染节点和边。<ul><li>节点： x6 内置 rect 、circle、 ellipse、 polygon（多边形）、图片、嵌入矩形的图片等<a href="https://antv-x6.gitee.io/zh/docs/tutorial/basic/cell#%E5%86%85%E7%BD%AE%E8%8A%82%E7%82%B9">基础图形</a>，<a href="https://www.ruanyifeng.com/blog/2018/08/svg.html">SVG 图像入门教程</a></li><li>边：样式上支持的非常灵活，可参考<a href="https://antv-x6.gitee.io/zh/examples/gallery#category-%E6%A0%B7%E5%BC%8F">x6-边</a></li><li>节点和边都支持样式定制</li></ul></li></ol><h1 id="基类-Cell"><a href="#基类-Cell" class="headerlink" title="基类 Cell"></a>基类 Cell</h1><p>Cell 是 x6 中的基础元素，所有的节点、边、组等都继承自 Cell，Cell 定义了节点和边共同的属性和方法，如样式属性、可见行、业务数据等<br><img src="/img/cell.jpeg"></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>同上，Cell 的配置是节点和边都会继承可以使用的。下面记录一些容易忽略或者比较有用的，详细的还是要看官方文档</p><ul><li>id 节点&#x2F;边唯一标识，默认使用自动生成的 UUID</li><li>markup 节点&#x2F;边的 SVG&#x2F;HTML 片段</li><li>attrs 节点&#x2F;边属性样式</li><li>shape 节点&#x2F;边的图形</li><li>visible 节点&#x2F;边是否可见</li><li>parent 节点&#x2F;边的父元素</li><li>children 子节点&#x2F;边</li><li>data 节点&#x2F;边关联的业务数据</li></ul><h3 id="markup"><a href="#markup" class="headerlink" title="markup"></a>markup</h3><p>指定渲染节点和边时使用的 SVG&#x2F;HTML 片段。使用 JSON 格式描述，例如 Shape.Rect 节点的 markup 定义如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;markup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rect&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;selector&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;body&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;selector&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;label&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>表示该节点内部包含 rect 和 text 两个 SVG 元素，渲染到页面之后，节点对应的 SVG 元素看起来像下面这样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">g</span></span><br><span class="hljs-tag">  <span class="hljs-attr">data-cell-id</span>=<span class="hljs-string">&quot;c2e1dd06-15c6-43a4-987a-712a664b8f85&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;x6-cell x6-node&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;translate(40,40)&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#000&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fill-opacity</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span></span><br><span class="hljs-tag">    <span class="hljs-attr">font-size</span>=<span class="hljs-string">&quot;14&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xml:space</span>=<span class="hljs-string">&quot;preserve&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#333&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">text-anchor</span>=<span class="hljs-string">&quot;middle&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">font-family</span>=<span class="hljs-string">&quot;Arial, helvetica, sans-serif&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;matrix(1,0,0,1,50,20)&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tspan</span> <span class="hljs-attr">dy</span>=<span class="hljs-string">&quot;0.3em&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;v-line&quot;</span>&gt;</span>rect<span class="hljs-tag">&lt;/<span class="hljs-name">tspan</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br></code></pre></td></tr></table></figure><p>markup 配置项如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Markup</span> &#123;<br>  <span class="hljs-attr">tagName</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">//元素标签名，对应 SVG 标签如 rect、text。也可以指定HTML标签，需要一下配置ns属性</span><br>  ns?: <span class="hljs-built_in">string</span> <span class="hljs-comment">//设置 tagName 的命名空间，如果 tagName 使用的是 SVG 的标签名，则为&quot;http://www.w3.org/2000/svg&quot;（默认值）；如果tagName指定的标签是HTML元素时，需要指定为&quot;http://www.w3.org/1999/xhtml&quot;</span><br>  selector?: <span class="hljs-built_in">string</span> <span class="hljs-comment">//设置该元素的选择器，在 attr 中通过这个选择器来为该元素设置样式</span><br>  groupSelector?: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[] <span class="hljs-comment">//群组选择器。为多个元素设置相同群组选择器，可以添加公共属性</span><br>  attrs?: &#123; [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> &#125; <span class="hljs-comment">//markup中的attrs属性只支持原生的SVG属性，X6的自定义属性在这里不可用</span><br>  style?: &#123; [<span class="hljs-attr">key</span>:<span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> &#125;<br>  className?: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[] textContent?: <span class="hljs-built_in">string</span><br>  children?: <span class="hljs-title class_">Markup</span>[] <span class="hljs-comment">//嵌套的子元素</span><br>&#125;<br><br><span class="hljs-comment">//实际配置</span><br>&#123;<br>  <span class="hljs-string">&quot;markup&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;tagName&quot;</span>: <span class="hljs-string">&quot;rect&quot;</span>,<br>      <span class="hljs-string">&quot;selector&quot;</span>: <span class="hljs-string">&quot;body&quot;</span>,<br>      ...<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;tagName&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-string">&quot;selector&quot;</span>: <span class="hljs-string">&quot;label&quot;</span>,<br>      ...<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h3><h4 id="定制节点样式"><a href="#定制节点样式" class="headerlink" title="定制节点样式"></a>定制节点样式</h4><p>用来定制节点样式。attrs 是一个对象，key 为节点的元素选择器 selector ，对应的值是 SVG 元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Fills_and_Strokes">SVG 属性值</a></p><p>选择器 selector 由节点&#x2F;边的 markup 决定，如 Shape.Rect 节点定义了 ‘body’（代表<rect>元素）和 ‘label’(代表 <text> 元素) 两个选择器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> rect = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>.<span class="hljs-title class_">Rect</span>(&#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">attrs</span>: &#123;<br>    <span class="hljs-attr">body</span>: &#123;<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#2ECC71&#x27;</span>,<br>      <span class="hljs-attr">stroke</span>: <span class="hljs-string">&#x27;#000&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">label</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;rect&#x27;</span>,<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#333&#x27;</span>,<br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-number">13</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>节点渲染到画布后的 DOM 结构看起来像下面这样:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">g</span></span><br><span class="hljs-tag">  <span class="hljs-attr">data-cell-id</span>=<span class="hljs-string">&quot;3ee1452c-6d75-478d-af22-88e03c6d513b&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;x6-cell x6-node&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;translate(40,40)&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#2ECC71&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#000&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span></span><br><span class="hljs-tag">    <span class="hljs-attr">font-size</span>=<span class="hljs-string">&quot;13&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xml:space</span>=<span class="hljs-string">&quot;preserve&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#333&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">text-anchor</span>=<span class="hljs-string">&quot;middle&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">font-family</span>=<span class="hljs-string">&quot;Arial, helvetica, sans-serif&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;matrix(1,0,0,1,50,20)&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tspan</span> <span class="hljs-attr">dy</span>=<span class="hljs-string">&quot;0.3em&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;v-line&quot;</span>&gt;</span> rect <span class="hljs-tag">&lt;/<span class="hljs-name">tspan</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外，我们还<strong>可以使用 CSS 选择器来指定节点样式</strong>，这样我们就不用记住预定的选择器名称，只需要根据渲染后的 DOM 结构来定义样式即可。使用 CSS 选择器时需要注意，指定的 CSS 选择器可能选中多个元素，这时对应的属性样式将同时应用到多个元素上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> rect = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>.<span class="hljs-title class_">Rect</span>(&#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">attrs</span>: &#123;<br>    <span class="hljs-attr">rect</span>: &#123;<br>      <span class="hljs-comment">// 使用 rect css 选择器替代预定义的 body 选择器</span><br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#2ECC71&#x27;</span>,<br>      <span class="hljs-attr">stroke</span>: <span class="hljs-string">&#x27;#000&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">text</span>: &#123;<br>      <span class="hljs-comment">// 使用 text css 选择器替代预定义的 label 选择器</span><br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;rect&#x27;</span>,<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#333&#x27;</span>,<br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-number">13</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="更新节点样式"><a href="#更新节点样式" class="headerlink" title="更新节点样式"></a>更新节点样式</h4><p>创建节点&#x2F;边后可以调用实例上的 attr() 方法来更新节点&#x2F;边的属性值，看下面代码，通过 &#x2F; 分割的路径修改样式，label 选择器对应到 <text> 元素，text 则是该元素的属性名，’hello’ 是新的属性值,传入 null 时可移除该属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rect.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;label/text&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br><br><span class="hljs-comment">// 等同于</span><br>rect.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;label&#x27;</span>, &#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 等同于</span><br>rect.<span class="hljs-title function_">attr</span>(&#123;<br>  <span class="hljs-attr">label</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="选项默认值（公共配置）"><a href="#选项默认值（公共配置）" class="headerlink" title="选项默认值（公共配置）"></a>选项默认值（公共配置）</h3><p>Cell.config(options) 用来配置选项默认值，一般在自定义节点&#x2F;边时用到，去设置自定义节点&#x2F;边的默配置项的默认值。详见<a href="https://antv-x6.gitee.io/zh/docs/tutorial/basic/cell#%E9%80%89%E9%A1%B9%E9%BB%98%E8%AE%A4%E5%80%BC">官方文档</a></p><h1 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h1><p>节点除了从 Cell 继承的选项外，还支持以下选项：</p><ul><li>x 节点位置 x 坐标，单位 px</li><li>y y 坐标，同 x</li><li>width</li><li>height</li><li>angle 节点旋转角度</li></ul><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><p>两个方式，构造函数创建和 Graph.addNode() 创建</p><ol><li>构造函数创建，通过形状的构造函数创建出节点再调用 addNode 添加到画布</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Shape</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@antv/x6&#x27;</span>;<br><br><span class="hljs-comment">// 创建节点</span><br><span class="hljs-keyword">const</span> rect = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>.<span class="hljs-title class_">Rect</span>(&#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">angle</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-attr">attrs</span>: &#123;<br>    <span class="hljs-attr">body</span>: &#123;<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;blue&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">label</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;white&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 添加到画布</span><br>graph.<span class="hljs-title function_">addNode</span>(rect);<br></code></pre></td></tr></table></figure><ol start="2"><li>直接添加到画布，通过 Graph.addNode() 添加 <strong>推荐使用</strong><br>通过 shape 来指定图形，x6 内部会根据 shape 找到对应的构造函数来初始化节点并加到画布。这里的 shape 也可以使用自定义节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> rect = graph.<span class="hljs-title function_">addNode</span>(&#123;<br>  <span class="hljs-attr">shape</span>: <span class="hljs-string">&#x27;rect&#x27;</span>, <span class="hljs-comment">// 指定使用何种图形，默认值为 &#x27;rect&#x27;</span><br>  <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">40</span>,<br>  <span class="hljs-attr">angle</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-attr">attrs</span>: &#123;<br>    <span class="hljs-attr">body</span>: &#123;<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;blue&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">label</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;white&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="边"><a href="#边" class="headerlink" title="边"></a>边</h1><h2 id="创建边"><a href="#创建边" class="headerlink" title="创建边"></a>创建边</h2><p>同节点一样，创建边有两种方式，这里只放一个官方推荐的 addEdge</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> rect = graph.<span class="hljs-title function_">addEdge</span>(&#123;<br>  <span class="hljs-attr">shape</span>: <span class="hljs-string">&#x27;edge&#x27;</span>, <span class="hljs-comment">// 指定使用何种图形，默认值为 &#x27;edge&#x27;</span><br>  <span class="hljs-attr">source</span>: rect1,<br>  <span class="hljs-attr">target</span>: rect2,<br>&#125;);<br></code></pre></td></tr></table></figure><p>配置项支持：</p><ul><li>source 边源节点，也可以是点</li><li>target 边目标节点，<strong>也可以是点</strong></li><li>attrs 同节点 attrs 配置，可以配置线的箭头样式</li><li>vertices 路径点，边从起始点开始，按顺序经过路径点，最后到达终止点。</li><li>router 路由，连线的走势，如绕过点等,router 将对 vertices 进一步处理，并在必要时添加额外的点，然后返回处理后的点。</li><li>connector 连线,消费 router 生成的点，连线样式如曲线，直接圆角等</li><li>labels 多标签，可以配置数组支持多标签</li><li>label 单标签</li><li>defaultLabel 默认标签</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可以和点连线</span><br>graph.<span class="hljs-title function_">addEdge</span>(&#123;<br>  <span class="hljs-attr">source</span>: <span class="hljs-string">&#x27;rect1&#x27;</span>, <span class="hljs-comment">// 源节点 ID</span><br>  <span class="hljs-attr">target</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">120</span> &#125;, <span class="hljs-comment">// 目标点</span><br>  <span class="hljs-attr">vertices</span>: [<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span> &#125;,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">300</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">120</span> &#125;,<br>  ], <span class="hljs-comment">// 路径点</span><br>  <span class="hljs-attr">router</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;orth&#x27;</span>,<br>    <span class="hljs-attr">args</span>: &#123;&#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由 Router"></a>路由 Router</h2><p>路由是一种策略，用于将边连接到节点。X6 内置了多种<a href="https://antv-x6.gitee.io/zh/docs/api/registry/router#orth">路由策略</a>，如 ‘orth’（正交）、’polyline’（折线）、’Manhattan’（曼哈顿）等。还可以<a href="https://antv-x6.gitee.io/zh/docs/api/registry/router#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1">自定义路由</a></p><h2 id="连接器-connector"><a href="#连接器-connector" class="headerlink" title="连接器 connector"></a>连接器 connector</h2><p>链接器 connector 将路由 router 返回的点加工成渲染边需要的 pathData。例如，rounded 连接器将连线之间的倒角处理为圆弧倒角。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">graph.<span class="hljs-title function_">addEdge</span>(&#123;<br>  <span class="hljs-attr">source</span>: rect1,<br>  <span class="hljs-attr">target</span>: rect2,<br>  <span class="hljs-attr">vertices</span>: [<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span> &#125;,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">300</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">120</span> &#125;,<br>  ],<br>  <span class="hljs-attr">router</span>: <span class="hljs-string">&#x27;orth&#x27;</span>,<br>  <span class="hljs-attr">connector</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rounded&#x27;</span>,<br>    <span class="hljs-attr">args</span>: &#123;&#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="/img/connector.jpeg"></p><p>x6 默认提供了直线连接器、平滑连接器、圆弧连接器、跳线连接器等多种连接器，也可以<a href="https://antv-x6.gitee.io/zh/docs/api/registry/connector#normal">自定义连接器</a></p><h2 id="标签-labels"><a href="#标签-labels" class="headerlink" title="标签 labels"></a>标签 labels</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> edge = graph.<span class="hljs-title function_">addEdge</span>(&#123;<br>  <span class="hljs-attr">source</span>: rect1,<br>  <span class="hljs-attr">target</span>: rect2,<br>  <span class="hljs-attr">labels</span>: [<br>    &#123;<br>      <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">label</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;edge&#x27;</span> &#125; &#125;,<br>    &#125;,<br>  ],<br>&#125;);<br><span class="hljs-comment">// 或</span><br><span class="hljs-keyword">const</span> edge = graph.<span class="hljs-title function_">addEdge</span>(&#123;<br>  <span class="hljs-attr">source</span>: rect1,<br>  <span class="hljs-attr">target</span>: rect2,<br>  <span class="hljs-attr">labels</span>: [<span class="hljs-string">&#x27;edge&#x27;</span>], <span class="hljs-comment">// 通过 labels 可以设置多个标签，当只设置标签文本是可以简化为此写法</span><br>&#125;);<br><span class="hljs-comment">// 或</span><br><span class="hljs-keyword">const</span> edge = graph.<span class="hljs-title function_">addEdge</span>(&#123;<br>  <span class="hljs-attr">source</span>: rect1,<br>  <span class="hljs-attr">target</span>: rect2,<br>  <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;edge&#x27;</span>, <span class="hljs-comment">// 通过 label 设置单个标签，当只设置标签文本是可以简化为此写法</span><br>&#125;);<br><br><span class="hljs-comment">// 设置标签</span><br>edge.<span class="hljs-title function_">setLabels</span>([<br>  &#123;<br>    <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">label</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;edge&#x27;</span> &#125; &#125;,<br>  &#125;,<br>]);<br><span class="hljs-comment">// 或</span><br>edge.<span class="hljs-title function_">setLabels</span>([<span class="hljs-string">&#x27;edge&#x27;</span>]);<br><br><span class="hljs-comment">// 添加单个标签</span><br>edge.<span class="hljs-title function_">appendLabel</span>(&#123;<br>  <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">label</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;edge&#x27;</span> &#125; &#125;,<br>&#125;);<br><span class="hljs-comment">// 或</span><br>edge.<span class="hljs-title function_">appendLabel</span>(<span class="hljs-string">&#x27;edge&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>监听事件的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">graph.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;eventxxx...&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123; e, x, y, cell, view &#125;</span>) =&gt;</span> &#123;&#125;);<br>graph.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;node:click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123; e, x, y, node, view &#125;</span>) =&gt;</span> &#123;&#125;);<br>graph.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;edge:click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123; e, x, y, edge, view &#125;</span>) =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>自定义元素的点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-title function_">attr</span>(&#123;<br>  <span class="hljs-comment">// 自定义一个 node:delete 事件， 表示一个删除按钮，点击时删除该节点</span><br>  <span class="hljs-attr">image</span>: &#123;<br>    <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;node:delete&#x27;</span>,<br>    <span class="hljs-attr">xlinkHref</span>: <span class="hljs-string">&#x27;trash.png&#x27;</span>,<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">20</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">//可以通过绑定的事件名 node:delete 或通用的 cell:customevent、node:customevent、edge:customevent 事件名来监听</span><br>graph.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;node:delete&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123; view, e &#125;</span>) =&gt;</span> &#123;<br>  e.<span class="hljs-title function_">stopPropagation</span>();<br>  view.<span class="hljs-property">cell</span>.<span class="hljs-title function_">remove</span>();<br>&#125;);<br><span class="hljs-comment">//或者</span><br>graph.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;node:customevent&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123; name, view, e &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&#x27;node:delete&#x27;</span>) &#123;<br>    e.<span class="hljs-title function_">stopPropagation</span>();<br>    view.<span class="hljs-property">cell</span>.<span class="hljs-title function_">remove</span>();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p><a href="">官方 demo</a><br>工具是渲染在节点&#x2F;边上的小部件，用于增强节点&#x2F;边的交互能力，提供了一些内置工具：</p><ul><li><p>节点<br>button 在指定位置处渲染一个按钮，支持自定义按钮的点击交互。<br>button-remove 在指定的位置处，渲染一个删除按钮，点击时删除对应的节点。<br>boundary 根据节点的包围盒渲染一个包围节点的矩形。注意，该工具仅仅渲染一个矩形，不带任何交互。</p></li><li><p>边<br>vertices 路径点工具，在路径点位置渲染一个小圆点，拖动小圆点修改路径点位置，双击小圆点删除路径点，在边上单击添加路径点。<br>segments 线段工具。在边的每条线段的中心渲染一个工具条，可以拖动工具条调整线段两端的路径点的位置。<br>boundary 根据边的包围盒渲染一个包围边的矩形。注意，该工具仅仅渲染一个矩形，不带任何交互。<br>button 在指定位置处渲染一个按钮，支持自定义按钮的点击交互。<br>button-remove 在指定的位置处，渲染一个删除按钮，点击时删除对应的边。<br>source-arrowhead-和-target-arrowhead 在边的起点或终点渲染一个图形(默认是箭头)，拖动该图形来修改边的起点或终点。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>worker 和 sharedWorker</title>
    <link href="/2023/08/21/worker%20%E5%92%8C%20sharedWorker/"/>
    <url>/2023/08/21/worker%20%E5%92%8C%20sharedWorker/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天听到了 sharedWorker 可以实现多页面共享资源，觉得很新奇，决定学习一下</p></blockquote><span id="more"></span><h1 id="共同点和区别"><a href="#共同点和区别" class="headerlink" title="共同点和区别"></a>共同点和区别</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>worker: 当前环境（可以理解为页面）的专属线程，可用来解决 web 页面由于 js 单线程导致的阻塞问题</li><li>sharedWorker: 共享线程，同源策略下，多个环境（页面）共用同一个线程，包括数据</li></ul><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><p>api 使用方式大致相同</p><h1 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>worker.js 与主线程脚本文件同源</li><li>worker 所在环境的全局对象与主线程不同，无法读取主线程网页的 Dom 对象，无法使用 document、window、parent 等对象。</li><li>worker 线程与主线程不在同一个上下文环境，不同直接通信，必须通过消息完成</li><li>worker 线程不能执行 alert 和 confirm 方法，但可以使用 XMLHttpRequest 对象发出 ajax 请求</li><li>worker.js 不能读取本地文件（即 file:&#x2F;&#x2F;），所加载的脚本必须来自网络</li><li>worker 内部还可以再建 Worker 线程（只有 Firefox 支持）。可以将一个计算密集的任务分配到 10 哥 Worker</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变。这个工作可以放在 Worker 里面</p><h1 id="sharedWorker"><a href="#sharedWorker" class="headerlink" title="sharedWorker"></a>sharedWorker</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>同源的多个页面通过 port 发送消息。各个页面注册自己的 port ，在 worker.js 中维护 port pool ，需要向所有页面广播消息的时候，遍历 port 发送消息</p><p>与普通 Worker 不同的是：</p><ol><li>同一个 js url 只会创建一个 sharedWorker，其他页面再使用同样的 url 创建 sharedWorker，会复用已创建的 worker，这个 worker 由那几个页面共享。</li><li>sharedWorker 通过 port 来发送和接收消息</li></ol><h2 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h2><ul><li>页面关闭后，port 不会自动清除，会浪费内存。因此可以监听页面关闭如 ，在关闭前通知 shared worker 将无效的 woker 从 portPool 中移除</li></ul><h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><p>多个页面共享长连接数据等</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/imgss/p/14634577.html">sharedWorker 实现多页面通信</a><br><a href="https://www.ruanyifeng.com/blog/2018/07/web-worker.html">Web Worker 使用教程</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代码提交规范</title>
    <link href="/2023/05/06/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <url>/2023/05/06/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<blockquote><p>规范的代码提交方便开发者或用户查看项目的开发信息和功能特性；并且在多人协作的项目中，规范的提交说明可以让协作者或者 CR 成员快速了解变化的性质和内容；开发者也可以根据规范的 commit 信息自动生成 CHANGELOG</p></blockquote><span id="more"></span><h2 id="提交格式"><a href="#提交格式" class="headerlink" title="提交格式"></a>提交格式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>): <span class="hljs-tag">&lt;<span class="hljs-name">subject</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>commit 的类型，根据提交内容来选择类型，方便快速查阅变更种类</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>feat</td><td>新特性</td></tr><tr><td>fix</td><td>修改问题</td></tr><tr><td>refactor</td><td>代码重构</td></tr><tr><td>docs</td><td>文档修改</td></tr><tr><td>style</td><td>不影响代码运行的变动，如代码格式修改、补全缺失的分号等, 注意不是 css 修改</td></tr><tr><td>test</td><td>测试用例修改</td></tr><tr><td>build</td><td>影响内部依赖和构建的修改，例如 glup，webpack，rollup 的配置等</td></tr><tr><td>chore</td><td>不修改 src 或者 test 的其他修改，如依赖、构建的改动</td></tr><tr><td>pref</td><td>性能提升的修改</td></tr><tr><td>ci</td><td>CI 的修改</td></tr><tr><td>revert</td><td>还原前一个 commit</td></tr></tbody></table><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>影响范围，如 fix(cli), feat(api) ，也可以具体到文件、页面，如 fix(orderPage) 。如影响范围很广，可以写 fix(*)</p><h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p>给出本次提交的简要描述信息，描述精炼但要体现提交的具体内容，例如”fix(controller): fix incorrect image name causing image pull error”, 而不是 “fix(controller): fix small bug”</p><ul><li>不超过 50 个字符</li><li>第一个字母不应大写（基础规则，commitlint 不会通过）</li><li>最后一个字符不能是英文句号（基础规则，commitlint 不会通过）</li></ul><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>说明本次提交的具体内容，建议包含变动的目的以及和相比于之前的变化之处，可以分为多行</p><h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><p>不兼容变动的说明和关闭 Issue 等。如果是不兼容的改动，即当前代码跟上一个版本不兼容，需要在 Footer 部分，以 BREAKING CHANG: 开头，后面跟上不兼容改动的摘要</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&#x27;feat: add cluster config&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/commit1.png"></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq">git commit -m &#x27;feat(homepage): refactor homepage code<br><span class="hljs-built_in">quote</span>&gt;<br><span class="hljs-built_in">quote</span>&gt; - add navigation bar<br><span class="hljs-built_in">quote</span>&gt; - delete <span class="hljs-built_in">left</span> menu bar<br><span class="hljs-built_in">quote</span>&gt;<br><span class="hljs-built_in">quote</span>&gt; BREAKING CHANGE: the menu <span class="hljs-built_in">field</span> type has changed<br><span class="hljs-built_in">quote</span>&gt; <span class="hljs-built_in">before</span>: string<br><span class="hljs-built_in">quote</span>&gt; <span class="hljs-built_in">after</span>: array<br><span class="hljs-built_in">quote</span>&gt; &#x27;<br></code></pre></td></tr></table></figure><p><img src="/img/commit2.png"></p><h2 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h2><p>可以使用 <a href="https://commitlint.js.org/#/">commitlint</a> 和 husky 配合，将 commitlint 集成为 Git Hooks, 在提交代码前对 commit 信息进行校验</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装-husky"><a href="#安装-husky" class="headerlink" title="安装 husky"></a>安装 husky</h4><blockquote><p>检查项目是否已经安装 husky 。如未安装，先安装 husky；如果已经安装，可以跳过 husky 安装步骤检查项目是否已经安装 husky 。如未安装，先安装 husky；如果已经安装，可以跳过 husky 安装步骤</p></blockquote><ol><li>项目根目录安装 husky 。husky 新老版本使用方式略有差异，安装版本 &gt;&#x3D; 8.0.0</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yarn</span> add husky@<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span> --save-dev<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化 husky</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">npx husky-<span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>该命令会在根目录下自动生成 .husky 文件</p><h4 id="配置-commitlint"><a href="#配置-commitlint" class="headerlink" title="配置 commitlint"></a>配置 commitlint</h4><ol><li>安装 commitlint</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><br>yarn <span class="hljs-keyword">add</span><span class="language-bash"> @commitlint/config-conventional @commitlint/cli -D</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>生成 commitlint 配置文件 commitlint.config.js ：</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>echo<span class="hljs-string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;;&quot;</span>&gt; commitlint<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span><br><br></code></pre></td></tr></table></figure><p>该命令会在根目录下生成 commitlint.config.js 文件：</p><ol start="3"><li>修改配置文件 commitlint.config.js 如下（这里 scope-enum 为 scope 选项，可以根据项目情况自行配置）：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>],<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;scope-empty&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>    <span class="hljs-string">&#x27;scope-enum&#x27;</span>: [<br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&#x27;always&#x27;</span>,<br>      [<br>        <span class="hljs-string">&#x27;ci&#x27;</span>,<br>        <span class="hljs-string">&#x27;build&#x27;</span>,<br>        <span class="hljs-string">&#x27;test&#x27;</span>,<br>        <span class="hljs-string">&#x27;app.tsx&#x27;</span>,<br>        <span class="hljs-string">&#x27;config&#x27;</span>,<br>        <span class="hljs-string">&#x27;hooks&#x27;</span>,<br>        <span class="hljs-string">&#x27;idl&#x27;</span>,<br>        <span class="hljs-string">&#x27;services&#x27;</span>,<br>        <span class="hljs-string">&#x27;static&#x27;</span>,<br>        <span class="hljs-string">&#x27;store&#x27;</span>,<br>        <span class="hljs-string">&#x27;types&#x27;</span>,<br>        <span class="hljs-string">&#x27;utils&#x27;</span>,<br>        <span class="hljs-string">&#x27;首页&#x27;</span>,<br>      ],<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="4"><li>添加钩子</li></ol><p>（1） 查看根目录是否有 .husky 目录，如果有 .husky 目录，终端运行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">npx husky <span class="hljs-keyword">add</span><span class="language-bash"> .husky/commit-msg <span class="hljs-string">&#x27;npx --no-install commitlint --edit $1&#x27;</span></span><br></code></pre></td></tr></table></figure><p>命令运行后会在 .husky 目录下创建 commit-msg 钩子</p><p>（2） 查看 package.json ，是否已有 husky hooks 配置 ， 已有 husky 配置，在原有配置后，加上 commit-msg hook：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;husky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;xxx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commit-msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><ol start="5"><li>安装完成，再运行 git commit 就会对提交的信息进行校验了。规则默认是 &lt;type&gt;: &lt;subject&gt;</li></ol><h3 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><ol><li>运行 echo “module.exports &#x3D; {extends: [‘@commitlint&#x2F;config-conventional’]};”&gt; commitlint.config.js 生成配置文件时失败</li></ol><p>解决方案： 在根目录手动创建 commitlint.config.js 文件，然后把下面代码片段粘贴进去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>运行 npx husky add.husky&#x2F;commit-msg ‘npx –no-install commitlint –edit $1’ 时失败</li></ol><p>解决方案： 在根目录手动创建 commit-msg 文件，然后把下面代码片段粘贴进去：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npx</span> --<span class="hljs-literal">no</span>-install commitlint --edit <span class="hljs-variable">$1</span><br></code></pre></td></tr></table></figure><ol start="3"><li>安装 husky@latest 后，hooks 未生效</li></ol><p>解决方案： 删除 .husky 目录，删除已安装的 husky 依赖，重新安装 husky 指定版本，如 yarn add <a href="mailto:&#x68;&#x75;&#115;&#107;&#x79;&#x40;&#x38;&#46;&#x30;&#x2e;&#x33;">&#x68;&#x75;&#115;&#107;&#x79;&#x40;&#x38;&#46;&#x30;&#x2e;&#x33;</a></p><ol start="4"><li>运行 git commit -m 之后报错 Command “husky-run” not found</li></ol><p>解决方案：检查根目录下是否有 .husky 目录 ，如果没有，运行 npx husky-init 在根目录下生成 .husky 目录</p><ol start="5"><li>运行 commit 后出现 Error: no test specified 错误</li></ol><p>解决方案： 删除 .husky &#x2F; pre-commit 文件中的 npm test 命令</p><ol start="6"><li>编译失败 ，报错 error @commitlint&#x2F;<a href="mailto:&#99;&#x6c;&#105;&#64;&#49;&#55;&#46;&#x36;&#x2e;&#x35;">&#99;&#x6c;&#105;&#64;&#49;&#55;&#46;&#x36;&#x2e;&#x35;</a>: The engine “node” is incompatible with this module. Expected version “&gt;&#x3D;v14”. Got “12.22.12”</li></ol><p>解决方案一：重新安装 &gt;&#x3D;v14 的 node 版本。本地可以使用 nvm 切换版本。火山项目 scm 编译失败可以在 scm_build.sh 中配置<br>解决方案二：忽略 node 版本。本地可以在终端运行命令：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">yarn config set ignore-engines <span class="hljs-literal">true</span><br><span class="hljs-comment">//or</span><br>npm config set ignore-engines <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="commitizen-x2F-cz-cli"><a href="#commitizen-x2F-cz-cli" class="headerlink" title="commitizen&#x2F;cz-cli"></a>commitizen&#x2F;cz-cli</h2><p>辅助提交的<a href="https://github.com/commitizen/cz-cli">工具</a>，命令式输入完整的 commit 信息</p><h3 id="安装-cli"><a href="#安装-cli" class="headerlink" title="安装 cli"></a>安装 cli</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> commitizen<br>commitizen <span class="hljs-keyword">init</span> cz-conventional-changelog --yarn --dev --exact <span class="hljs-meta"># 项目更目录下运行</span><br>cz <span class="hljs-meta"># 用这个命令代替 git commit</span><br><br></code></pre></td></tr></table></figure><h3 id="配置适配器"><a href="#配置适配器" class="headerlink" title="配置适配器"></a>配置适配器</h3><p>通过安装适配器来定制提交说明</p><ol><li>安装 cz-customizable</li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> cz-customizable <span class="hljs-comment">--save-dev</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在 package.json 中添加：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;commitizen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node_modules/cz-customizable&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在项目根目录下创建 .cz-config.js 文件，内容如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> commitLintConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./commitlint.config&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">types</span>: [<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;feat:     新增功能&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fix:      修改问题&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;refactor:      代码重构&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;docs:     文档修改&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;style&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;style:    不影响代码运行的变动，如代码格式修改、补全缺失的分号等, 注意不是 css 修改&#x27;</span>,<br>    &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test:     测试用例修改&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;build&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;build:    构建流程、外部依赖变更，比如升级 npm 包、修改 webpack 配置&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;chore&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chore:    对构建过程或辅助工具和库的更改,不影响源文件、测试用例的其他操作&#x27;</span>,<br>    &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;perf:     性能提升的修改&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ci&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ci:       修改了 CI 配置、脚本&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;revert:   回滚 commit&#x27;</span> &#125;,<br>  ],<br>  <span class="hljs-attr">scopes</span>: commitLintConfig.<span class="hljs-property">rules</span>[<span class="hljs-string">&#x27;scope-enum&#x27;</span>][<span class="hljs-number">2</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">scope</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">name</span>: scope,<br>  &#125;)),<br>  <span class="hljs-attr">messages</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;选择你要提交的类型:&#x27;</span>,<br>    <span class="hljs-attr">scope</span>: <span class="hljs-string">&#x27;\n选择一个 scope:&#x27;</span>,<br>    <span class="hljs-attr">customScope</span>: <span class="hljs-string">&#x27;请输入自定义的 scope:&#x27;</span>,<br>    <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;填写一个简短精炼的描述语句:\n&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;添加一个更加详细的描述(可选):\n&#x27;</span>,<br>    <span class="hljs-attr">breaking</span>: <span class="hljs-string">&#x27;列举非兼容性重大的变更 (可选):\n&#x27;</span>,<br>    <span class="hljs-attr">footer</span>: <span class="hljs-string">&#x27;列举出所有变更的 ISSUES CLOSED  (可选)。 例如.: #31, #34:\n&#x27;</span>,<br>    <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">&#x27;确认提交?&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">allowCustomScopes</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">allowBreakingChanges</span>: [<span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-string">&#x27;fix&#x27;</span>],<br>  <span class="hljs-attr">subjectLimit</span>: <span class="hljs-number">50</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="4"><li>配置完成。现在运行 cz 来测试一下</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br>cz<br></code></pre></td></tr></table></figure><h2 id="VSCode-提交插件-vscode-commitizen"><a href="#VSCode-提交插件-vscode-commitizen" class="headerlink" title="VSCode 提交插件 - vscode-commitizen"></a>VSCode 提交插件 - vscode-commitizen</h2><p>vsCode 插件形式的 <a href="https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-commitizen">commitizen 工具</a><br>和 commitizen&#x2F;cz-cli 一样，辅助提交的工具，二者选其一即可</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><h4 id="插件市场下载插件"><a href="#插件市场下载插件" class="headerlink" title="插件市场下载插件"></a>插件市场下载插件</h4><p>搜索 Visual Studio Code Commitizen Support 下载安装插件</p><h4 id="定制提交说明"><a href="#定制提交说明" class="headerlink" title="定制提交说明"></a>定制提交说明</h4><p>在项目根目录下创建 .cz-config.js 文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> commitLintConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./commitlint.config&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">types</span>: [<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;feat:     新增功能&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fix:      修改问题&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;refactor:      代码重构&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;docs:     文档修改&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;style&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;style:    不影响代码运行的变动，如代码格式修改、补全缺失的分号等, 注意不是 css 修改&#x27;</span>,<br>    &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test:     测试用例修改&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;build&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;build:    构建流程、外部依赖变更，比如升级 npm 包、修改 webpack 配置&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;chore&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chore:    对构建过程或辅助工具和库的更改,不影响源文件、测试用例的其他操作&#x27;</span>,<br>    &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;perf:     性能提升的修改&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ci&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ci:       修改了 CI 配置、脚本&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;revert:   回滚 commit&#x27;</span> &#125;,<br>  ],<br>  <span class="hljs-attr">scopes</span>: commitLintConfig.<span class="hljs-property">rules</span>[<span class="hljs-string">&#x27;scope-enum&#x27;</span>][<span class="hljs-number">2</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">scope</span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">name</span>: scope,<br>  &#125;)),<br>  <span class="hljs-attr">messages</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;选择你要提交的类型:&#x27;</span>,<br>    <span class="hljs-attr">scope</span>: <span class="hljs-string">&#x27;\n选择一个 scope:&#x27;</span>,<br>    <span class="hljs-attr">customScope</span>: <span class="hljs-string">&#x27;请输入自定义的 scope:&#x27;</span>,<br>    <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;填写一个简短精炼的描述语句:\n&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;添加一个更加详细的描述(可选):\n&#x27;</span>,<br>    <span class="hljs-attr">breaking</span>: <span class="hljs-string">&#x27;列举非兼容性重大的变更 (可选):\n&#x27;</span>,<br>    <span class="hljs-attr">footer</span>: <span class="hljs-string">&#x27;列举出所有变更的 ISSUES CLOSED  (可选)。 例如.: #31, #34:\n&#x27;</span>,<br>    <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">&#x27;确认提交?&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">allowCustomScopes</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">allowBreakingChanges</span>: [<span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-string">&#x27;fix&#x27;</span>],<br>  <span class="hljs-attr">subjectLimit</span>: <span class="hljs-number">50</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>点击 vscode 源代码管理面板的蓝色圆圈图标，按照提示编辑即可</p><h3 id="踩坑记录-1"><a href="#踩坑记录-1" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><ol><li>使用时出现报错 “command not found”</li></ol><p>解决方案: 重启 VSCode</p><ol start="2"><li>报错 “fatal: 不是 git 仓库”</li></ol><p>解决方案: 命令会在 VSCode 当前窗口的根目录下运行。需要保证代码仓库处于当前窗口最顶层</p><h2 id="gitlab-commitlint"><a href="#gitlab-commitlint" class="headerlink" title="gitlab commitlint"></a>gitlab commitlint</h2><p>可以在 gitlab CI 上配置 commitlint ，在 merge 时进行 commit 信息校验，强制卡点</p><h2 id="自动生成-changelog"><a href="#自动生成-changelog" class="headerlink" title="自动生成 changelog"></a>自动生成 changelog</h2><p>1.安装<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli">conventional-changelog-cli</a></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br>yarn <span class="hljs-meta">global</span> <span class="hljs-keyword">add</span> conventional-changelog-<span class="hljs-keyword">cli</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>在 packages.json 中添加快捷命令</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;setup&quot;</span>: <span class="hljs-string">&quot;npm run reset &amp;&amp; npx @jupiter/install-dep -i=<span class="hljs-subst">\&quot;</span>yarn install<span class="hljs-subst">\&quot;</span>&quot;</span>,<br><span class="hljs-string">&quot;reset&quot;</span>: <span class="hljs-string">&quot;rm -rf node\*modules&quot;</span>,<br><span class="hljs-string">&quot;lint&quot;</span>: <span class="hljs-string">&quot;eslint --ext .js,.jsx,.ts,.tsx,.mjs,.mjsx,.cjs,.cjsx --fix --format codeframe --ignore-pattern node_modules/ --ignore-pattern dist/ --ignore-pattern output/ --ignore-pattern output_resource/ ./&quot;</span>,<br><span class="hljs-string">&quot;lint:error&quot;</span>: <span class="hljs-string">&quot;jupiter lint --quiet&quot;</span>,<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo &#x27;请在项目根目录执行 yarn new 启用单元测试、集成测试功能。&#x27;&quot;</span>,<br><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;ROUTE_IP=10.227.11.110 VOLC_API_HOST=console-stable.volcanicengine.com jupiter dev&quot;</span>,<br><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;rm -rf output_resource &amp;&amp; jupiter build&quot;</span>,<br><span class="hljs-string">&quot;lint:style&quot;</span>: <span class="hljs-string">&quot;stylelint --fix <span class="hljs-subst">\&quot;</span>\*\*/\_.&#123;css,less,tsx&#125;<span class="hljs-subst">\&quot;</span>&quot;</span>,<br><span class="hljs-string">&quot;changelog&quot;</span>: <span class="hljs-string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>运行 yarn changelog 即可生成 CHANGELOG.md</li></ol><p><img src="/img/commit3.jpg"></p><h2 id="提交规约"><a href="#提交规约" class="headerlink" title="提交规约"></a>提交规约</h2><ul><li>【MUST】不能向 master、release 分支强制提交（push -f）代码（即使拥有该权限）</li><li>【MUST】非紧急部署等特殊情况，不能向 master 、release 分支提交代码</li><li>【SHOULD】代码及时提交至远程分支，避免代码丢失</li><li>【MUST】涉及文件名大小写变更的情况下要二次检查，确保更改完成，可以在 MR code diff 处注意一下</li><li>【SHOULD】提交频次建议：<ul><li>完整功能完成后提交一次</li><li>某个 Bug 解决完成后提交一次</li><li>下班前提交一次（如果 commit 的内容相同，注意整个功能完成后使用 rebase 合并一下 commit）</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于 Service Worker 和 Cache 的性能优化</title>
    <link href="/2023/02/11/%E5%9F%BA%E4%BA%8E%20Service%20Worker%20%E5%92%8C%20Cache%20%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2023/02/11/%E5%9F%BA%E4%BA%8E%20Service%20Worker%20%E5%92%8C%20Cache%20%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过本文可以了解到：</p><ul><li>Service Worker 上手</li><li>浏览器 Cache Storage 使用</li><li>结合 Service Worker 与 Cache Storage 实现页面稳定性提高和提高静态资源响应速度</li></ul></blockquote><span id="more"></span><h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>我理解的 Service Worker ： 运行在浏览器后台的 js 脚本，可以监听、改写页面的网络请求，根据 js 脚本做相应的处理，如使用缓存、发起请求等。相当于浏览器和服务器之间的一个可编程的网络代理，可以控制页面请求如何发出，如何响应</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p><img src="/img/sw/sw1.png" alt="在这里插入图片描述"><br>在 Firefox 浏览器的用户隐私模式，Service Worker 不可用</p><h3 id="与页面交互"><a href="#与页面交互" class="headerlink" title="与页面交互"></a>与页面交互</h3><p>独立的 js 线程，不能直接操控 dom ，与页面之间可以通过 postMessage 通信</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Service Worker 的生命周期独立于页面</p><ol><li>调用 navigator.serviceWorker.register 开始，浏览器开始下载 sw.js 并开始解析执行</li><li>然后进入安装阶段，这个阶段可以在 sw.js 脚本中监听 install 事件，install 事件中可以对前置资源进行缓存。需要注意的是，如果此阶段资源缓存失败将会导致此次 Service Worker 安装失败，但是也不必担心，后续 Service Worker 会重新下载安装</li><li>安装完成之后，浏览器判断当前 scope（目录，url path） 是否存在已激活的 Service Worker ，如果存在，新安装的 Service Worker 会进入等待阶段<ul><li>等待已激活的 worker 不再对任意页面进行控制</li><li>等待新安装 Service Worker 是否有 self.skipWaiting() 的执行</li><li>或者某个页面执行了 registration.update()</li></ul></li><li>进入激活阶段的 Service Worker 才能托管页面</li></ol><blockquote><p>当前 scope 已经存在 Service Worker 的情况下，后续的 Service Worker 会存在等待期，原因在于页面（Client）与 Service Worker 是多对一的关系。<br>一个 scope 下的激活的 Service Worker 只有一个，也就是说我们通过多个 tab 页打开的多个页面，实际托管的 Service Worker 只有一个。需要注意处理 Service Worker 新老版本兼容，比如我们上线了最新的 sw 文件，用户刷新某一个页面时，安装了最新的 Service Worker 。如果再切换回老代码页面，此时为新 worker 在接管页面，如果不兼容操作时会报错甚至白屏</p></blockquote><blockquote><p>如果页面中存在多个 Service Worker 时，使用和当前页面 url 最长 path 匹配即当前 html 最近的 sw.js 托管当前页面</p></blockquote><h3 id="只支持-HTTPS"><a href="#只支持-HTTPS" class="headerlink" title="只支持 HTTPS"></a>只支持 HTTPS</h3><p>出于安全考量，Service workers 只能由 HTTPS 承载。注册 Service Worker 需要用到 navigator.serviceWorker ，但是 http 协议下该 api 为 undefined 。为了便于开发调试，浏览器在 localhost 和 127.0.0.1:port 场景下保存了 navigator.serviceWorker api 。</p><p><img src="/img/sw/sw2.png" alt="在这里插入图片描述"></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="注册-Service-Worker"><a href="#注册-Service-Worker" class="headerlink" title="注册 Service Worker"></a>注册 Service Worker</h4><p>创建一个 html ，引入入口文件 index.js ，index.js 中我们注册 Service Worker</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//src/index.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">initSw</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//sw.js 放在网站根目录，代理网站所有资源</span><br>    navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/sw.js&#x27;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">registration</span>) &#123;<br>        <span class="hljs-comment">// Registration was successful</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>          <span class="hljs-string">&#x27;ServiceWorker registration successful with scope: &#x27;</span>,<br>          registration.<span class="hljs-property">scope</span><br>        );<br>      &#125;,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-comment">// registration failed :(</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ServiceWorker registration failed: &#x27;</span>, err);<br>      &#125;<br>    );<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">initSw</span>();<br>&#125;;<br><br><span class="hljs-title function_">init</span>();<br></code></pre></td></tr></table></figure><p>可以看到控制台输出：<br><img src="/img/sw/sw3.png" alt="在这里插入图片描述"><br>查看 Application ，可以看到当前页面注册的所有 Service Worker：<br><img src="/img/sw/sw4.png" alt="在这里插入图片描述"><br>可以通过 chrome:&#x2F;&#x2F;serviceworker-internals&#x2F;?devtools 查看当前浏览器注册的所有 Service Worker<br><img src="/img/sw/sw5.png" alt="在这里插入图片描述"></p><h4 id="监听-fetch"><a href="#监听-fetch" class="headerlink" title="监听 fetch"></a>监听 fetch</h4><p>在 sw.js 文件中监听 fetch<br>（注意： 改写 sw 之后需要重启 Service Worker ，可以勾选 Update on reload 选项，否则 sw 资源不会更新）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//sw.js</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;event&#x27;</span>, event);<br>&#125;);<br></code></pre></td></tr></table></figure><p>输出的 event 对象：<br>![在这里插入图片描述]&#x2F;img&#x2F;sw&#x2F;sw6.png)<br>可以拿到 request ，进行请求改写或其他操作</p><h4 id="respondWith-请求改写"><a href="#respondWith-请求改写" class="headerlink" title="respondWith - 请求改写"></a>respondWith - 请求改写</h4><p>fetch event 对象提供了 respondWith 方法，提供了在 service Worker 中修改 response 的能力。<br>在 fetch.js 中发起一个请求，请求为本地模拟：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// /api/test.json</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;testapi&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发起 &#x2F;api&#x2F;test 请求会返回 {“name”: “testapi”}<br>demo 中的请求是通过点击 fetchBtn 发起：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//fetch.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">initFetchButton</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fetchBtn&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/test&#x27;</span>);<br>      <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result&#x27;</span>, result);<br>    &#125;);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">initSw</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//sw.js 放在网站根目录，代理网站所有资源</span><br>    navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/sw.js&#x27;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">registration</span>) &#123;<br>        <span class="hljs-comment">// Registration was successful</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>          <span class="hljs-string">&#x27;ServiceWorker registration successful with scope: &#x27;</span>,<br>          registration.<span class="hljs-property">scope</span><br>        );<br>      &#125;,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-comment">// registration failed :(</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ServiceWorker registration failed: &#x27;</span>, err);<br>      &#125;<br>    );<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">initSw</span>();<br>  <span class="hljs-title function_">initFetchButton</span>();<br>&#125;;<br><br><span class="hljs-title function_">init</span>();<br></code></pre></td></tr></table></figure><p>在 sw.js 中，我们对请求进行改写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//sw.js</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;event&#x27;</span>, event);<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/api/test&#x27;</span>)) &#123;<br>    event.<span class="hljs-title function_">respondWith</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<br>        <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sw rewrite result&#x27;</span>,<br>        &#125;)<br>      )<br>    );<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>点击 fetchBtn 查看请求结果，请求结果被成功改写：<br><img src="/img/sw/sw7.png" alt="在这里插入图片描述"><br>上述改写为同步修改，适用于请求结果为固定值的场景。请求改写也支持异步修改，比如返回的结果依赖接口返回的数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//sw.js</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;event&#x27;</span>, event);<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/api/test&#x27;</span>)) &#123;<br>    event.<span class="hljs-title function_">respondWith</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>          <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>          <span class="hljs-title function_">resolve</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<br>              <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;result.name&#125;</span>_sw_rewrite`</span>,<br>              &#125;)<br>            )<br>          );<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>          <span class="hljs-title function_">reject</span>(e);<br>        &#125;<br>      &#125;)<br>    );<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在返回结果的基础上进行改写，我们得到了返回结果：</p><p><img src="/img/sw/sw8.png" alt="在这里插入图片描述"></p><p>需要注意，<strong>respondWith 需要立即同步调用</strong>，因为 sw 这里只是监听 fetch ，并不能阻止 respondWith 在其他地方被调用。第一个同步调用 respondWith 的处理程序获胜，其余尝试调用的处理程序将忽略。比如如果服务端请求响应先返回，那么会先调用 respondWith 将服务端结果返回给页面，而 sw 中的 respondWith 后执行，将被忽略</p><h2 id="Cache-Storage"><a href="#Cache-Storage" class="headerlink" title="Cache Storage"></a>Cache Storage</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>cache storage 可以缓存浏览器的静态资源响应，只能缓存 get 请求</li><li>缓存不会过期，但有大小限制（50MB 到 20GB 根据用户存储空间剩余大小），需要定期清理</li><li>提供了一个 ServiceWorker 、其它类型 worker 或者 window 都可以访问到接口，通过全局变量 caches 访问</li></ul><h3 id="开始使用-1"><a href="#开始使用-1" class="headerlink" title="开始使用"></a>开始使用</h3><p>基于 Promise 提供了增删读写的 api：</p><ol><li>caches.open(cacheName)：打开 cacheName，没有的话自动创建该 cacheName，返回一个 promise，值为当前 cacheName 对应的 cache 存储对象</li><li>cache.add(requestPath) 向 cache 中添加一个缓存，Service Worker 会自动发起请求缓存</li><li>cache.addAll(requestPath) 向 cache 中添加多个缓存，Service Worker 会自动发起请求缓存</li><li>caches.has(cacheName)：匹配当前的 cacheName 对象，返回一个 promise，有该 cacheName 则返回 true，否则返回 false</li><li>caches.keys：返回一个 promise，其值为当前所有 cachesName，合并为一个数组</li><li>caches.match(path, options)：匹配路由请求（参数一般写成路径形式），对于检查给定的 Request 是否是 CacheStorage 对象跟踪的任何 Cache 对象的键，并返回一个 resolve 为该匹配的 Promise。<blockquote><p>可选 options 参数:</p><ul><li>ignoreSearch: Boolean ，指定匹配过程是否应该忽略 url 中查询参数。举个例子，如果该参数设置为 true, 那么 ?value&#x3D;bar 作为 <a href="http://foo.com/?value=bar">http://foo.com/?value=bar</a> 中的查询参数将会在匹配过程中被忽略。该参数默认 false。</li><li>cacheName: DOMString 值， 表示所要搜索的缓存名称</li></ul></blockquote></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">initCacheLog</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> cacheName = <span class="hljs-string">&#x27;ls-test&#x27;</span>;<br><br>  <span class="hljs-comment">//open</span><br>  <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">open</span>(cacheName);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;open res&#x27;</span>, cache);<br><br>  <span class="hljs-comment">//add</span><br>  <span class="hljs-keyword">await</span> cache.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;/api/addTest&#x27;</span>);<br><br>  <span class="hljs-comment">//addAll</span><br>  <span class="hljs-keyword">await</span> cache.<span class="hljs-title function_">addAll</span>([<span class="hljs-string">&#x27;/api/addAllTest1&#x27;</span>, <span class="hljs-string">&#x27;/api/addAllTest2&#x27;</span>]);<br><br>  <span class="hljs-comment">//has</span><br>  <span class="hljs-keyword">const</span> hasRes = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">has</span>(cacheName);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;has res&#x27;</span>, hasRes);<br><br>  <span class="hljs-comment">//keys</span><br>  <span class="hljs-keyword">const</span> keysRes = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">keys</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;keys res&#x27;</span>, keysRes);<br><br>  <span class="hljs-comment">//match</span><br>  <span class="hljs-keyword">const</span> matchRes = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;/api/addAllTest1&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;match res&#x27;</span>, matchRes);<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/sw/sw9.png" alt="在这里插入图片描述"><br><img src="/img/sw/sw10.png" alt="在这里插入图片描述"></p><h2 id="网页请求优化"><a href="#网页请求优化" class="headerlink" title="网页请求优化"></a>网页请求优化</h2><p>结合 Service Worker 和 Cache Storage 可以对网页请求优化，下面记录我学习的两种方式： <strong>提升系统稳定性</strong> 和 <strong>提高响应速度</strong></p><h3 id="提升系统稳定性"><a href="#提升系统稳定性" class="headerlink" title="提升系统稳定性"></a>提升系统稳定性</h3><p>大致思路：监听请求，通过 cache.match 拿到请求 path 对应的缓存，然后利用 respondWith 方法返回<br>有几个需要注意的点：</p><ol><li>需要考虑请求 path 没有缓存的情况，此时应该向服务器发起请求，将请求结果返回页面，并且将该缓存添加到 Cache ，便于之后可用</li><li>需要考虑使用服务端返回的最新数据，当网络出问题时再使用不新鲜的缓存提高系统稳定性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// sw.js</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/api/addTest&#x27;</span>)) &#123;<br>    event.<span class="hljs-title function_">respondWith</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//最先获取服务端结果，如果服务端数据返回直接用服务端数据，并且更新缓存</span><br>          <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>          <span class="hljs-comment">// cacheName 为 ls-test，在该 cache 目录下存放请求缓存</span><br>          caches.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;ls-test&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">cache</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              cache.<span class="hljs-title function_">add</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;&#125;<br>          &#125;);<br>          <span class="hljs-keyword">if</span> (res.<span class="hljs-property">ok</span>) &#123;<br>            <span class="hljs-title function_">resolve</span>(res);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//获取服务端数据失败，抛出错误</span><br>            <span class="hljs-keyword">throw</span> res.<span class="hljs-property">statusText</span>;<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>          <span class="hljs-comment">//服务端请求失败，使用缓存，没有缓存，抛出请求错误</span><br>          <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">match</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>          <span class="hljs-keyword">if</span> (cache) &#123;<br>            <span class="hljs-title function_">resolve</span>(cache);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">reject</span>(e);<br>          &#125;<br>        &#125;<br>      &#125;)<br>    );<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="提高响应速度"><a href="#提高响应速度" class="headerlink" title="提高响应速度"></a>提高响应速度</h3><p>页面应用中会有多次获取同一个静态资源的情况，如单页面应用组件重复构建，多页面应用页面反复切换，这两种情况下静态资源都会重复请求。可以通过 Service Worker 对静态资源进行缓存，减少资源加载时间</p><p>改写 fetch.js ，点击 fetchBtn ，请求 10 次同一图片</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// /src/fetch.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">initFetchButton</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span><br>      .<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fetchBtn&#x27;</span>)<br>      .<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fetchImageInterval);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchImageInterval</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> maxTimes = <span class="hljs-number">10</span>;<br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (maxTimes &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title function_">fetch</span>(<br>        <span class="hljs-string">&#x27;https://lf3-static.bytednsdoc.com/obj/eden-cn/jiheh7nuhboznuhps/home-page.png&#x27;</span><br>      );<br>    &#125;<br>    maxTimes = maxTimes - <span class="hljs-number">1</span>;<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">initSw</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//sw.js 放在网站根目录，代理网站所有资源</span><br>    navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/sw.js&#x27;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">registration</span>) &#123;<br>        <span class="hljs-comment">// Registration was successful</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>          <span class="hljs-string">&#x27;ServiceWorker registration successful with scope: &#x27;</span>,<br>          registration.<span class="hljs-property">scope</span><br>        );<br>      &#125;,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-comment">// registration failed :(</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ServiceWorker registration failed: &#x27;</span>, err);<br>      &#125;<br>    );<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">initSw</span>();<br>  <span class="hljs-title function_">initFetchButton</span>();<br>&#125;;<br><br><span class="hljs-title function_">init</span>();<br></code></pre></td></tr></table></figure><p>先来看一下不使用 Service Worker 网页加载十次图片资源的速度。<br>network 查看资源下载速度如下：</p><p><img src="/img/sw/sw11.png" alt="在这里插入图片描述"><br>我们再在 Service Worker 中对该图片进行缓存：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript">self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;home-page.png&#x27;</span>)) &#123;<br>    event.<span class="hljs-title function_">respondWith</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">match</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>        <span class="hljs-keyword">if</span> (cache) &#123;<br>          <span class="hljs-comment">// 缓存中有，返回缓存</span><br>          <span class="hljs-title function_">resolve</span>(cache);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 缓存中没有去向服务端发起请求，请求结果返回给页面，更新缓存</span><br>            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">ok</span>) &#123;<br>              <span class="hljs-title function_">resolve</span>(res);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">throw</span> res.<span class="hljs-property">statusText</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>              caches.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;ls-test&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">_cache</span>) =&gt;</span> &#123;<br>                _cache.<span class="hljs-title function_">add</span>(event.<span class="hljs-property">request</span>.<span class="hljs-title function_">clone</span>());<br>              &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;&#125;<br>          &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-title function_">reject</span>(error);<br>          &#125;<br>        &#125;<br>      &#125;)<br>    );<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>资源被缓存到 cache 中：<br><img src="/img/sw/sw12.png" alt="在这里插入图片描述"></p><p>看一下资源加载速度：</p><p><img src="/img/sw/sw13.png" alt="在这里插入图片描述"><br>可以看到，使用缓存资源后，加载速度仅需几 ms ！</p><h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><ul><li>Workbox： Google Chrome 开源的一套 Service Worker 解决方案，对 Service Worker 可能遇到的各种场景进行封装，降低上手成本</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm install 原理</title>
    <link href="/2023/01/14/npm%20install%20%E5%8E%9F%E7%90%86/"/>
    <url>/2023/01/14/npm%20install%20%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><blockquote><p>打包项目经常遇到依赖版本冲突的情况，学习一下 npm install 原理帮助了解依赖安装过程</p></blockquote><span id="more"></span><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>js 社区提供了代码工具公共平台 ，每个人都可以将自己的模块化代码发布在公共平台上，每个人也可以从公共平台上下载别人的模块化代码作为工具使用，这种模块化代码称为包，平台称为包管理平台，行为称为包管理，发布包、下载包的工具称为包管理工具</p><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><ul><li>最早是使用网址共享包，比如 jQuery 把包发布在 jQuery 官网，使用者需要从 jQuery 官网找到下载链接下载包，再把包引入到自己的项目中。这样产生的问题是开发者引入不同的依赖包，需要逐个找地址下载引入</li><li>npm 发布，用一个工具把所有的开源代码集中到一起进行管理、下载，需要的时候执行命令把代码下载到项目中，但是早期的时候应用不广泛，开发者不太愿意把代码放到指定地方</li><li>nodejs 诞生之后，急需一个包管理工具，与 npm 达成合作，使 npm 被广泛应用</li><li>随着前端应用发展，项目依赖越来越多，暴露了 npm 的问题： 队列加载导致依赖加载时间过长，构建速度慢；大量重复的依赖项嵌套在 node_modules 中，导致包结构混乱。此时，npm 被使用最多的命令是 rm -rf node_modules</li><li>npm 进行了改进，扁平化 node_modules 文件</li><li>yarn 发布，采用并行加载包的方式，并且优先从缓存中加载，而不是从网络上重新下载，大大提高了依赖安装速度，提供了 yarn.lock 锁定依赖版本提供确定的依赖关系，这些特性使得 yarn 被广泛应用</li><li>npm5 发布，package-lock.json 提供锁定依赖版本的功能与 yarn 进行竞争</li><li>npm ci 发布，直接使用 package-lock.json 构建代码，没有依赖安全性分析和版本分析，大大减短构建时间</li><li>npm 6 发布，提供了对依赖包安全性的检查，构建时间与 yarn 不再有差异</li><li>…</li></ul><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>以 npm6 为例，介绍一下构建原理</p><h3 id="npm-install-发生了什么"><a href="#npm-install-发生了什么" class="headerlink" title="npm install 发生了什么"></a>npm install 发生了什么</h3><p><img src="/img/npm.png#pic_center" alt="引入"></p><h4 id="获取-npm-配置"><a href="#获取-npm-配置" class="headerlink" title="获取 npm 配置"></a>获取 npm 配置</h4><p>从 .npmrc 文件获取配置 。如果有多个 .npmrc 文件 ，按照项目级的.npmrc 文件 &gt; 用户级的 .npmrc 文件 &gt; 全局级的 .npmrc &gt; npm 内置的 .npmrc 文件获取配置</p><p>通过 npm config list 查看当前生效的 .npmrc 位置，通过 npm config edit 可以查看和修改当前生效的 .npmrc 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//npm config list</span><br>; cli configs<br>metrics-registry = <span class="hljs-string">&quot;http://bnpm.byted.org/&quot;</span><br>scope = <span class="hljs-string">&quot;&quot;</span><br>user-agent = <span class="hljs-string">&quot;npm/6.14.15 node/v14.17.6 darwin x64&quot;</span><br><br>; userconfig /<span class="hljs-title class_">Users</span>/bytedance/.<span class="hljs-property">npmrc</span><br>registry = <span class="hljs-string">&quot;http://bnpm.byted.org/&quot;</span><br><br>; node bin location = <span class="hljs-regexp">/Users/</span>bytedance/.<span class="hljs-property">nvm</span>/versions/node/v14<span class="hljs-number">.17</span><span class="hljs-number">.6</span>/bin/node<br>; cwd = <span class="hljs-regexp">/Users/</span>bytedance/<span class="hljs-title class_">Documents</span>/learn/npm<br>; <span class="hljs-variable constant_">HOME</span> = <span class="hljs-regexp">/Users/</span>bytedance<br>; <span class="hljs-string">&quot;npm config ls -l&quot;</span> to show all defaults.<br></code></pre></td></tr></table></figure><p>配置文件字段说明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">registry = <span class="hljs-string">&#x27;https://bnpm.byted.org/&#x27;</span> <span class="hljs-comment">//指定包仓库</span><br>sass_binary_site=<span class="hljs-attr">https</span>:<span class="hljs-comment">//bnpm.bytedance.net/mirrors/node-sass //指定 node-sass 模块仓库</span><br>cache=~<span class="hljs-regexp">/.cache/</span>npm_cache <span class="hljs-comment">//指定缓存仓库</span><br></code></pre></td></tr></table></figure><h4 id="构建逻辑依赖树"><a href="#构建逻辑依赖树" class="headerlink" title="构建逻辑依赖树"></a>构建逻辑依赖树</h4><p><strong>有 package-lock.json</strong><br>检查 package-lock.json 和 package.json 直接依赖版本是否兼容(<a href="#%E5%8C%85%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E8%A7%84%E5%88%99">兼容规则</a>)，兼容的话根据 lock 确定依赖，否则根据 package.json 确定依赖（这种情况后面 lock 文件会更新 。举例，package.json 中 dayjs 是 ^2.0 版本，lock 中是 1.9 版本，那么会加载 2.0 版本的 dayjs 包，且会更新 lock 中版本为 2.0 )。子依赖版本根据 lock 确定<br><strong>没有 package-lock.json</strong><br>会按照 package.json 递归构建依赖树，不管是直接依赖还是子依赖，都先放在 node_modules 根目录下，再次遇到该依赖时，判断根目录下的依赖版本是否符合，如果不符合将该版本放在当前依赖的 node_modules 目录下，形成逻辑依赖树，直接依赖与子依赖冲突时，将子依赖放在父依赖下的 node_modules 中</p><h4 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h4><p>检查缓存中是否有，如果缓存中有，直接解压到 node_modules ; 缓存中没有，从远程下载，校验安全性，解压到 node_modules</p><h4 id="检查包完整性"><a href="#检查包完整性" class="headerlink" title="检查包完整性"></a>检查包完整性</h4><p>下载依赖之前，就能拿到依赖包对应的 hash 值，依赖下载完成会计算文件的 hash 值进行对比，相同则代表是完整的。首次加载会将 hash 值通过 integrity 字段保存在 lock 文件中，之后再加载相同包对比 lock 文件中 hash 即可</p><p><img src="/img/npm-check.png" alt="ls"></p><h4 id="生成-package-lock-json-文件"><a href="#生成-package-lock-json-文件" class="headerlink" title="生成 package-lock.json 文件"></a>生成 package-lock.json 文件</h4><p>将逻辑依赖树保存至 package-lock.json</p><h3 id="发布一个-npm-包"><a href="#发布一个-npm-包" class="headerlink" title="发布一个 npm 包"></a>发布一个 npm 包</h3><p>登录 npm 账号，npm publish 即可</p><h3 id="npm7"><a href="#npm7" class="headerlink" title="npm7"></a>npm7</h3><ol><li>较 npm6 进行了一些性能上的优化，如代码测试覆盖率提高，依赖包数量减少等；</li><li>可以识别 yarn.lock ，可以使 yarn.lock 作为数据的来源，如果有 yarn.lock 还会使他与 package 的内容保持最新</li><li>peerDependencies 改动： 之前的版本如果 peerDependencies 与主应用有冲突依然会继续安装，npm7 做的改动是不继续安装，抛出错误</li></ol><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><h3 id="包版本兼容规则"><a href="#包版本兼容规则" class="headerlink" title="包版本兼容规则"></a>包版本兼容规则</h3><p>在 package.json dependencies 中 ^ ~ 符号代表不同的版本要求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//packages.json</span><br><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;@arco-design/color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;@arco-design/web-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.38.0&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;@babel/runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~7.13.0&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>举例说明下 ^ 和 ~ 规则</p><ul><li>^<br>最左侧非 0 数字后的数字可以随意匹配，如果缺少某一个版本号则这个版本号的位置可以任意<br>^1.1.0 可以匹配 1.x.x<br>^0.2.0 可以匹配 0.2.x<br>^0.0 可以匹配 0.0.x</li><li>~<br>次级版本必须一致，次级版本之后的数字可以随意匹配，如果没有次级版本，则次级版本也随意<br>~1.1.0 可以匹配 1.1.x<br>~0.2.0 可以匹配 0.2.x<br>~1.1 可以匹配 1.1.x<br>~1 可以匹配 1.x.x</li><li>无符号<br>只能匹配当前版本，如 1.1.1 只能匹配 1.1.1 版本<br>可以参见<a href="https://docs.npmjs.com/cli/v6/commands/npm-update">官方文档</a></li></ul><h3 id="配置项-dependencies"><a href="#配置项-dependencies" class="headerlink" title="配置项 - dependencies"></a>配置项 - dependencies</h3><ul><li>dependencies 运行时依赖 ，npm install –production，如各种 ui 包</li><li>devDependencies 开发时依赖，如 eslint 、jupiter 等</li><li>peerDependencies 插件和主应用相同的核心依赖库。插件运行前必须保证核心依赖库已经下载安装，一个项目中，插件和主应用的核心依赖如 react 、react dom 最好相同。<ol><li>如果主应用没有引入核心依赖则按照 peerDependencies 中声明的版本下载</li><li>如果主应用安装了核心依赖且版本兼容，则使用主应用中的核心依赖</li><li>如果主应用安装了核心依赖但是版本不兼容，则报错</li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>序列化工具 - Protobuf</title>
    <link href="/2022/12/25/Protobuf/"/>
    <url>/2022/12/25/Protobuf/</url>
    
    <content type="html"><![CDATA[<h2 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h2><blockquote><p>在开发私有协议需求中，需要用到 protocol 对消息进行序列化，另外发现私有协议的原理也参考了 protobuf 的实现。因此对 protobuf 进行了 0-0.1 的学习 QvQ~ 。学习 protobuf 的过程中，也对字节有了一定了解，这篇文章记录我的学习过程～</p></blockquote><span id="more"></span><h3 id="什么是-Protobuf"><a href="#什么是-Protobuf" class="headerlink" title="什么是 Protobuf"></a>什么是 Protobuf</h3><p>Google 推出的序列化数据的方法，用于通信协议，数据存储等，类似于我们熟知的 JSON，但是更小、更快</p><ol><li>语言无关、平台无关 支持 Java 、Js 、Python 等多种语言</li><li>高效 比 XML&#x2F;JSON 更小、更快</li><li>兼容性好，拓展性好 编译器对不识别的字段跳过不处理，这使得更新数据结构也不会影响和破坏原有的旧程序</li></ol><h3 id="与-json-相比"><a href="#与-json-相比" class="headerlink" title="与 json 相比"></a>与 json 相比</h3><ul><li>json 直接使用字段名称维护序列化之后的字段与值之间的关系，一般用字符串形式保存在序列化后的字节流中，侧重于<strong>数据结构化</strong>，可读性好</li><li>protobuf 采用二进制字节的序列化方式，用字段索引维护序列化之后的字段与值之间的关系，并且保存字段类型以便实现针对不同类型优化空间效率，侧重于<strong>数据序列化</strong>，可读性不好，但是传输效率、空间效率高，数据安全性好</li></ul><h3 id="使用-Protobuf"><a href="#使用-Protobuf" class="headerlink" title="使用 Protobuf"></a>使用 Protobuf</h3><h4 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h4><h5 id="proto-方式"><a href="#proto-方式" class="headerlink" title=".proto 方式"></a>.proto 方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package packagename;<br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br>message <span class="hljs-title class_">PackageMessage</span> &#123;<br>    required string password = <span class="hljs-number">1</span>;<br>    optional int32 pid = <span class="hljs-number">2</span>;<br>    required float price = <span class="hljs-number">3</span>;<br>    required bool isFree = <span class="hljs-number">4</span>;<br>    required <span class="hljs-title class_">ShopInfoMessage</span> info = <span class="hljs-number">5</span>;<br>    repeated string orderIds = <span class="hljs-number">6</span>;<br>&#125;<br><br>message <span class="hljs-title class_">ShopInfoMessage</span> &#123;<br>  required string color = <span class="hljs-number">10</span>;<br>  required int32 size = <span class="hljs-number">11</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上图，定义了一个名为 PackageMessage 的消息体，具有的字段为 password、pid、price、isFree、info 。<br>具体语法可以概括为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">字段规则 类型 名称 = 字段索引<br></code></pre></td></tr></table></figure><h5 id="json-方式"><a href="#json-方式" class="headerlink" title="json 方式"></a>json 方式</h5><p>上面 .proto 定义的数据格式使用 json 方式定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;nested&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;packagename&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;nested&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;PackageMessage&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;password&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;required&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;pid&quot;</span>:&#123;<br>              <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;int32&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span><br>            &#125;,<br>            <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;required&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;isFree&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bool&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">4</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;required&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;info&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ShopInfoMessage&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">5</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;required&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;orderIds&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">6</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;repeated&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;ShopInfoMessage&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;fields&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;color&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">10</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;required&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;size&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;int32&quot;</span>,<br>              <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">11</span>,<br>              <span class="hljs-string">&quot;rule&quot;</span>: <span class="hljs-string">&quot;required&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>nesated ： 命名空间</li><li>fields： 空间下面的字段集合</li><li>type： 字段类型</li><li>id： 字段索引</li><li>rule： 字段规则</li></ul><h5 id="字段规则"><a href="#字段规则" class="headerlink" title="字段规则"></a>字段规则</h5><ul><li>required 字段只能也必须出现一次</li><li>optional 字段可出现 0 或 1 次，默认值</li><li>repeated 字段为 Array 类型如上例 orderIds 为字符串类型数组</li></ul><h5 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h5><table><thead><tr><th>Field type</th><th>Expected JS Type</th></tr></thead><tbody><tr><td>int32、uint32、sint32、bool、enum</td><td>number（32 bit 整数）</td></tr><tr><td>int64、uint64、sint64</td><td>Long</td></tr><tr><td>float 、double</td><td>number</td></tr><tr><td>bool</td><td>boolean</td></tr><tr><td>string</td><td>string</td></tr><tr><td>bytes</td><td>Uint8Array、Buffer</td></tr><tr><td>message</td><td>object（需要定义 message 格式）</td></tr></tbody></table><h5 id="字段索引"><a href="#字段索引" class="headerlink" title="字段索引"></a>字段索引</h5><p>数据序列化时，protobuf 不会直接使用字段名称-字段值的方式进行序列话，而是会使用字段索引-字段值的方式使用 字段索引作为 key 对应的唯一标识。由于较小的数字所需空间更小，因此建议为常用的字段分配更小的字段编号。<br>索引的编码类型使用的是 <strong>Varint 编码</strong></p><h4 id="获取工具类"><a href="#获取工具类" class="headerlink" title="获取工具类"></a>获取工具类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> protobuf = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;protobufjs&#x27;</span>);<br><br>protobuf.<span class="hljs-title function_">load</span>(<span class="hljs-string">&#x27;./src/msg.proto&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, root</span>) &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">throw</span> err;<br>  &#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">PackageMessage</span> = root.<span class="hljs-title function_">lookupType</span>(<span class="hljs-string">&#x27;packagename.PackageMessage&#x27;</span>);<br><span class="hljs-comment">// PackageMessage 为 packagename.PackageMessage 所对应的数据格式的工具类，提供 verify、encode、decode 等工具方法</span><br></code></pre></td></tr></table></figure><h4 id="格式校验"><a href="#格式校验" class="headerlink" title="格式校验"></a>格式校验</h4><p>验证纯 JavaScript 对象是否满足有效消息的要求，因此可以毫无问题地进行编码。它不是抛出，而是将错误消息作为字符串返回（如果有）.<br><strong>注意:</strong> 如果消息体不满足定义的数据结构，编码会抛出错误，因此 encode 前一定要使用 verify 方法校验消息体的结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> errMsg = <span class="hljs-title class_">PackageMessage</span>.<span class="hljs-title function_">verify</span>(payload);<br><span class="hljs-keyword">if</span> (errMsg) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(errMsg);<br>&#125;<br></code></pre></td></tr></table></figure><p>举个例子，如果我们在 .proto 中指定了 price 为必传字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package packagename;<br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br>message <span class="hljs-title class_">PackageMessage</span> &#123;<br>    required string password = <span class="hljs-number">1</span>;<br>    optional int32 pid = <span class="hljs-number">2</span>;<br>    required float price = <span class="hljs-number">3</span>;<br>    required bool isFree = <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们缺失 price 字段的对象进行校验：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> payload = &#123;<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;password123&#x27;</span>,<br>  <span class="hljs-attr">pid</span>: <span class="hljs-number">345</span>,<br>  <span class="hljs-attr">isFree</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br><br><span class="hljs-keyword">var</span> errMsg = <span class="hljs-title class_">PackageMessage</span>.<span class="hljs-title function_">verify</span>(payload);<br><span class="hljs-keyword">if</span> (errMsg) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(errMsg);<br>&#125;<br></code></pre></td></tr></table></figure><p>会得到错误：<br><img src="/img/pb/pb1.png" alt="在这里插入图片描述"><br>在对数据进行格式化编译前，需要校验一下数据合法性，保障编译过程顺利进行</p><h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message = <span class="hljs-title class_">PackageMessage</span>.<span class="hljs-title function_">create</span>(payload);<br><span class="hljs-keyword">var</span> buffer = <span class="hljs-title class_">PackageMessage</span>.<span class="hljs-title function_">encode</span>(message).<span class="hljs-title function_">finish</span>();<br><br><span class="hljs-keyword">var</span> decodeMessage = <span class="hljs-title class_">PackageMessage</span>.<span class="hljs-title function_">decode</span>(buffer);<br></code></pre></td></tr></table></figure><h3 id="序列化与反序列化原理解析"><a href="#序列化与反序列化原理解析" class="headerlink" title="序列化与反序列化原理解析"></a>序列化与反序列化原理解析</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>采用 TLV &#x2F; TV 方式编码<br><img src="/img/pb/pb2.png" alt="在这里插入图片描述"></p><ul><li>field_number: message 字段名称标识，对应定义字段时指定的字段编号。解码端通过 .proto 描述文件来确定对应字段名称。因此 Protobuf 相对于 JSON&#x2F;XML 会安全一些，如果没有 .proto 文件，拿到数据后是无法解析的</li><li>wire_type: ProtoBuf 编码类型，根据这个类型选择不同的 Value 编码方案，目前 type 定义了 6 种值，如上图</li></ul><p>一个 message 编码由一个个的 field 组成，每个 field 根据类型将有如下两种格式：</p><ul><li>Tag - Length - Value： Length-delimited 编码类型将使用这种结构</li><li>Tag - Value：编码类型表中 Varint 使用这种结构</li></ul><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>通过下面两个例子一个字节一个字节去解析消息，更好的理解反序列化过程</p><h5 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h5><p>先解析一个 string 类型来初步熟悉下原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//.proto</span><br>package packagename;<br> syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br> message <span class="hljs-title class_">PackageMessage</span> &#123;<br>     required string password = <span class="hljs-number">1</span>;<br> &#125;<br> <span class="hljs-comment">//paylod</span><br> <span class="hljs-keyword">var</span> payload = &#123;<br>   <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;password123&#x27;</span>,<br> &#125;;<br></code></pre></td></tr></table></figure><p>对上面 payload 进行序列化，我们得到了：</p><blockquote><p>&lt;Buffer 0a 0b 70 61 73 73 77 6f 72 64 31 32 33&gt;</p></blockquote><p>逐个字节解析：</p><blockquote><p>0a &#x3D;&gt; 0000 1010</p></blockquote><p>开头的是 tag ，采用 Varints 编码，故 tag 从 1 开头的字节开始，到 0 开头的字节结束，这个字节 0 开头，为该序列的 Tag，后三位 010 为 wire_type，我们查阅上面序列化类型表得知该序列的消息类型为 Length-delimited - string 。前面的 0000 1 则代表该消息的字段编号，为 1。Length-delimited 类型的消息格式为 Tag-Length-Value ，所以下面我们继续使用 Varints 方式读取 Length</p><blockquote><p>0b &#x3D;&gt; 0000 1011</p></blockquote><p>消息体 length 为 11，所以接下来 11 个字节（70 61 73 73 77 6f 72 64 31 32 33）为消息体</p><blockquote><p>70 &#x2F;&#x2F; 对应字符为 p （String.fromCharCode(0x70) ）</p></blockquote><blockquote><p>61 &#x2F;&#x2F;a</p></blockquote><blockquote><p>73 &#x2F;&#x2F;s</p></blockquote><p>依次规则，我们可以解码得到 password 为 password123</p><h5 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h5><p>不同类型数据有不同的解析方式，列举一下 embedded messages 、int32、 float 类数据的解析方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//.proto</span><br>package packagename;<br> syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br> message <span class="hljs-title class_">PackageMessage</span> &#123;<br>     required float price = <span class="hljs-number">3</span>;<br>     required <span class="hljs-title class_">ShopInfoMessage</span> info = <span class="hljs-number">5</span>;<br> &#125;<br> message <span class="hljs-title class_">ShopInfoMessage</span> &#123;<br>   required string color = <span class="hljs-number">10</span>;<br>   required int32 size = <span class="hljs-number">11</span>;<br> &#125;<br> <span class="hljs-comment">//paylod</span><br> <span class="hljs-keyword">var</span> payload = &#123;<br>   <span class="hljs-attr">price</span>: <span class="hljs-number">1.99</span>,<br>   <span class="hljs-attr">info</span>: &#123;<br>     <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>     <span class="hljs-attr">size</span>: <span class="hljs-number">82341</span>,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure><p>对上面 payload 进行序列化，我们得到了：</p><blockquote><p>&lt;Buffer 1d 52 b8 fe 3f 2a 09 52 03 72 65 64 58 a5 83 05&gt;</p></blockquote><p>逐个字节解析：</p><blockquote><p>1d &#x3D;&gt; 0001 1101</p></blockquote><p>为 Tag ，101 为类型，对应类型表得知为 32-bit ，则消息体的格式为 Tag-Value ，接下来 4 个字节为 value； 0001 1 为字段编号，为 3。</p><blockquote><p>52 b8 fe 3f &#x2F;&#x2F; 为 Value</p></blockquote><p>编号 3 的 price 读取结束，继续向下读：</p><blockquote><p>2a &#x3D;&gt; 0010 1010 &#x2F;&#x2F;为 tag</p></blockquote><p>类型为 010 对应为 Length-delimited ，0010 1 代表编码为 5，由 proto 描述文件得知对应为 shopInfoMessage。整个消息格式为 Tag-Length-Value 。接下来读 length</p><blockquote><p>09</p></blockquote><p>下面 9 个字节（52 03 72 65 64 58 a5 83 05）为该字段 Value。该字段为 ShopInfoMessage 类型，故接下来解析 key-value 仍然会以 Tag-Length_Value 方式进行</p><blockquote><p>52 &#x3D;&gt; 0101 0010</p></blockquote><p>010 代表为 Length-delimited ，0101 0 &#x3D; 10 为字段编号为 10 ，查阅 proto 文件得知为 color</p><blockquote><p>03</p></blockquote><p>Value 长度为 3 （72 65 64）</p><blockquote><p>72 65 64</p></blockquote><p>red String.fromCharCode(0x72)..</p><blockquote><p>58 &#x3D;&gt; 0101 1000</p></blockquote><p>类型为 0 对应 Varint 。0101 1 为 11 对应字段编号查阅得知为 size。 Varint 读法我们读下面的字节获取 Value ，到 0 开头的字节为止：</p><blockquote><p>a5 &#x3D;&gt; 1010 0101<br>83 &#x3D;&gt; 1000 0011<br>05 &#x3D;&gt; 0000 0101</p></blockquote><p>得到 Value （Varints 读法 ）为 ： 1010 0101 1000 0011 0000 0101 去除符号位： 010 0101 000 0011 000 0101 ,因为 Varints 为小端字节序，交换高低位得到： 000 0101 000 0011 010 0101 ，按照字节位数整理一下 0 0001 0100 0001 1010 0101 ，获取到值 0x141a5 &#x3D; 82341</p><h3 id="Base-128-Varints"><a href="#Base-128-Varints" class="headerlink" title="Base 128 Varints"></a>Base 128 Varints</h3><p>Varint 是一种紧凑的表示数字的方法。它用一个或多个字节来表示一个数字，值越小的数字使用越少的字节数。这能减少用来表示数字的字节数</p><ol><li>在每个字节开头的 bit 设置了 msb(most significant bit 最高有效位)，标识是否需要继续读取下一个字节</li><li>存储数字对应的二进制补码</li><li>补码的低位排在前面</li></ol><p>Varint 实际上牺牲每个字节的第一位作为标志位，标识是否结束（是否需要继续读取下个字节），起到 length 的作用，因此无需为每个数字都分配四个字节（无论数字大小）。通过 Varints 让更小的数字使用更少的字节表示，提供了空间利用和效率</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>按照 Varint 读法来解析下面字节：</p><blockquote><p>1100 0110 1001 1000 0011 0110</p></blockquote><p>分别去除最高标志位得到：</p><blockquote><p>100 0110 001 1000 011 0110</p></blockquote><p>字节反转排列得到（低位在前面）：</p><blockquote><p>011 0110 001 1000 100 0110</p></blockquote><p>从后到前八个一组重新排序：</p><blockquote><p>0 1101 1000 1100 0100 0110</p></blockquote><p>获取到数字（求补码，正数补码是本身）：0xd8c46 &#x3D; 887878</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://github.com/protobufjs/protobuf.js">https://github.com/protobufjs/protobuf.js</a><br><a href="https://halfrost.com/protobuf_encode/#toc-18">https://halfrost.com/protobuf_encode/#toc-18</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>three.js</title>
    <link href="/2022/10/29/threejs/"/>
    <url>/2022/10/29/threejs/</url>
    
    <content type="html"><![CDATA[<h1 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a>three.js</h1><blockquote><p>周会上看到了其他同事演示的 3D 特效，好酷炫，我也来学习一下</p></blockquote><span id="more"></span><h2 id="认识-three-js"><a href="#认识-three-js" class="headerlink" title="认识 three.js"></a>认识 three.js</h2><p>three.js 显示 3d 元素，必须具备三要素： 渲染器，场景，相机。</p><ul><li>场景： 所有 3d 元素所在空间</li><li>渲染器： 将场景转化为 canvas 挂载在 dom 上</li><li>相机： 渲染器以哪个角度对 3d 元素进行显示</li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="一个最简单的-3d-动画"><a href="#一个最简单的-3d-动画" class="headerlink" title="一个最简单的 3d 动画"></a>一个最简单的 3d 动画</h3><p><a href="https://live.csdn.net/v/embed/237330">实际效果</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取 canvas 挂载的根节点</span><br><span class="hljs-keyword">const</span> rootDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;three-wrapper&#x27;</span>)!;<br><span class="hljs-comment">//创建场景实例</span><br><span class="hljs-keyword">const</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Scene</span>();<br><span class="hljs-comment">//创建相机实例，初始化相机参数</span><br><span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PerspectiveCamera</span>(<span class="hljs-number">75</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1000</span>);<br><br><span class="hljs-comment">//初始化渲染器实例</span><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>();<br><span class="hljs-comment">//设置渲染器尺寸</span><br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br><span class="hljs-comment">//将渲染器生成的 dom 元素塞到准备好的根节点中</span><br>rootDom.<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);<br><br><span class="hljs-comment">// 在场景中添加 3d 元素，首先初始化3d 元素的几何体</span><br><span class="hljs-keyword">const</span> geometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//3d 元素的材质，包括颜色，透明度等参数可以设置</span><br><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0xf5f5f5</span> &#125;);<br><span class="hljs-comment">//Mesh 是一个对象，采用几何体并且为其添加材质，可以生产 3d 元素在场景中自由移动</span><br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(geometry, material);<br><span class="hljs-comment">//将 3d 元素添加到场景中</span><br>scene.<span class="hljs-title function_">add</span>(cube);<br><br><span class="hljs-comment">//设置相机位置</span><br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">//设置动画</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">animate</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">//告知浏览器下次屏幕刷新之前调用 animate 更新动画（https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame）</span><br>  <span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>  <span class="hljs-comment">//设置 x、y 轴每次旋转角度</span><br>  cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> += <span class="hljs-number">0.01</span>;<br>  cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.01</span>;<br>  <span class="hljs-comment">//调用渲染器渲染场景和相机</span><br>  renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>&#125;<br><br><span class="hljs-comment">//执行动画</span><br><span class="hljs-title function_">animate</span>();<br><br></code></pre></td></tr></table></figure><h3 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>();<br><span class="hljs-comment">//设置渲染器尺寸</span><br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br><span class="hljs-comment">//将渲染器生成的 dom 元素塞到准备好的根节点中</span><br>rootDom.<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);<br><span class="hljs-comment">//调用渲染器渲染场景和相机</span><br>renderer.<span class="hljs-title function_">render</span>(scene, camera);<br></code></pre></td></tr></table></figure><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li>canvas 渲染器绘制内容输出到的 canvas ，对应 render.domElement 。 如果没传，three.js 会创建一个 canvas</li></ul><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li>render.domElement 渲染器绘制内容输出的 canvas 元素，需要将其添加到 dom 中</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>render.render(scene,camera) 使用相机渲染场景</li><li>render.setSize(width:number,height:number) 设置当前渲染器尺寸</li><li>render.setViewPort(x:number,y:number,width:number,height:number) 设置渲染器渲染区域相对视口的位置，从 x,y 渲染相应宽高的画布</li><li>renderer.setClearColor(‘#dbe4e8’) 设置画布颜色和透明度</li></ul><p>详细参数、方法见 <a href="https://threejs.org/docs/#api/en/renderers/WebGLRenderer">https://threejs.org/docs/#api/en/renderers/WebGLRenderer</a></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>放置物体、灯光和相机的空间</p><h3 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h3><p>从哪个角度生成 3d 物体的像。有正交相机（太阳光）、透视相机（人眼）、立体相机等，其中，更符合人眼视觉的是透视相机，详见</p><ul><li>camera.lookat( scene: Scene ) 调整相机朝向</li></ul><h4 id="透视相机-PerspectiveCamera"><a href="#透视相机-PerspectiveCamera" class="headerlink" title="透视相机 PerspectiveCamera"></a>透视相机 PerspectiveCamera</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PerspectiveCamera</span>(fov, aspect, near, far);<br></code></pre></td></tr></table></figure><p>只有在相机范围内的内容才会被渲染</p><ul><li>fov 相机视锥体垂直视野角度</li><li>aspect 输出图像宽高比，一般是渲染器宽高比</li><li>near 近端面的距离</li><li>far 远端面的距离</li></ul><p><img src="/img/three.png" alt="在这里插入图片描述"></p><h3 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h3><p>物体由几何形状、材质组成，由 Object 将几何形状和物体组合到一起，形成 3d 物体</p><h4 id="几何形状"><a href="#几何形状" class="headerlink" title="几何形状"></a>几何形状</h4><p>立方体 BoxGeometry 、胶囊形状 CapsuleGeometry、圆形 CircleGeometry 、锥体 ConeGeometry 、圆柱体 CylinderGeometry 、多面体 、线 EdgesGeometry 、挤压几何体 ExtrudeGeometry、平面几何、环形、球形、管等</p><h4 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h4><p>材料定义物体的外观。比如混合、color、透明等。<br>几种材质认识（对所有材料有个大体印象，知道做什么可以用什么）：</p><ul><li>LineBasicMaterial 绘制线的材料，实线</li><li>LineDashedMaterial 绘制线的材料，虚线</li><li>MeshBasicMaterial 绘制几何图形的材料，不受灯光影响</li><li>MeshDepthMaterial 按深度绘制几何图形</li><li>MeshDistanceMaterial 在内部使用点光源进行阴影映射</li><li>MeshLambertMaterial 适用于无光泽表面的材料，比如木头</li><li>MeshPhongMaterial 有镜面高光的材料</li><li>MeshStandardMaterial 有正确对光物理反应的材料。其他材料都是用近似值表示光与物体作用效果，这个是真实光照</li><li>MeshToonMaterial 实现卡通着色的材料</li><li>PointsMaterial 点材料</li><li>ShaderMaterial 使用自定义着色器进行作色 （ <a href="https://threejs.org/docs/#api/en/materials/ShaderMaterial%EF%BC%89">https://threejs.org/docs/#api/en/materials/ShaderMaterial）</a></li><li>ShadowMaterial 可以接收阴影，是透明的</li></ul><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><p>封装了一些模块，比如 BufferGeometry 、Object3D 等。<br>Object3D 为 three.js 中大多数对象的基类，提供了一组用于在 3d 空间中操作对象的属性和方法，比如 lookAt 改变对象朝向、对象的局部比例等</p><h2 id="上手使用"><a href="#上手使用" class="headerlink" title="上手使用"></a>上手使用</h2><p><a href="https://live.csdn.net/v/237972">实际效果</a></p><h1 id="react-three-fiber"><a href="#react-three-fiber" class="headerlink" title="react-three-fiber"></a>react-three-fiber</h1><p>react-three-fiber 对 three.js 进行封装，提供了适合 react 接入的组件式 api</p><h2 id="开始使用-1"><a href="#开始使用-1" class="headerlink" title="开始使用"></a>开始使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Canvas</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mesh</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">boxGeometry</span> <span class="hljs-attr">args</span>=<span class="hljs-string">&#123;[2,</span> <span class="hljs-attr">2</span>, <span class="hljs-attr">2</span>]&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meshStandardMaterial</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">mesh</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Canvas</span>&gt;<br></code></pre></td></tr></table></figure><p>结合上面代码看一下具体步骤：</p><ol><li>首先需要引入 Canvas 组件<ul><li>Canvas 组件设置了 secne 和 camera</li><li>每帧都会渲染场景，不需要像 three.js 那样手动做渲染循环</li><li>Canvas 组件响应父节点，所以可以通过改变父节点宽度、高度来控制他的大小</li></ul></li><li>在 Canvas 组件内部添加小写的 <mesh></mesh> 元素，这相当于 three.js 的 new Mesh ，他将材质和几何进行应用形成物体</li><li>在 mesh 内部写入材料和材质</li><li>boxGeometry 相当于 three.js 中的 BoxGeometry ，BoxGeometry 接受三个参数 x,y,z （new THREE.BoxGeometry(2, 2, 2)），那么 react-three-fiber 中对应传参的方式为 &lt;boxGeometry args&#x3D;{[2, 2, 2]} &#x2F;&gt;，args 就代表构造函数参数。（更改 args 需要重新构造对象）</li></ol><h2 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h2><p>three.js 属性设置方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//three.js</span><br><span class="hljs-keyword">const</span> light = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">DirectionalLight</span>();<br>light.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br>light.<span class="hljs-property">color</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;red&#x27;</span>);<br></code></pre></td></tr></table></figure><p>react-three-fiber 属性设置方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;directionalLight position=&#123;[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>]&#125; color=<span class="hljs-string">&#x27;red&#x27;</span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="将-object-绑定到父对象"><a href="#将-object-绑定到父对象" class="headerlink" title="将 object 绑定到父对象"></a>将 object 绑定到父对象</h2><p>使用 attach 将 object 设置到父元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;mesh&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meshBasicMaterial</span> <span class="hljs-attr">attach</span>=<span class="hljs-string">&quot;material&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">boxGeometry</span> <span class="hljs-attr">attach</span>=<span class="hljs-string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mesh</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如上，表示将 meshBasicMaterial 设置为 mesh 的 material ，将 boxGeometry 设置为 mesh 的 geometry 。（以 Material 结尾的元素会自动设置为 attach&#x3D;”material” ，以 Geometry 结尾的会自动设置为 attach&#x3D;”geometry” ，可以省略手动设置 ）<br>也可以透传：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;mesh&gt;<br>  &lt;bufferGeometry&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bufferAttribute</span> <span class="hljs-attr">attach</span>=<span class="hljs-string">&quot;attributes-position&quot;</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;v.length</span> / <span class="hljs-attr">3</span>&#125; <span class="hljs-attr">array</span>=<span class="hljs-string">&#123;v&#125;</span> <span class="hljs-attr">itemSize</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><br>&lt;/mesh&gt;<br></code></pre></td></tr></table></figure><p>表示设置 bufferGeometry.attributes.position</p><h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><p>提供一些列 event 监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;mesh<br>  onClick=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click&#x27;</span>)&#125;<br>  onContextMenu=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;context menu&#x27;</span>)&#125;<br>  onDoubleClick=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;double click&#x27;</span>)&#125;<br>  onWheel=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wheel spins&#x27;</span>)&#125;<br>  onPointerUp=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;up&#x27;</span>)&#125;<br>  onPointerDown=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;down&#x27;</span>)&#125;<br>  onPointerOver=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;over&#x27;</span>)&#125;<br>  onPointerOut=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;out&#x27;</span>)&#125;<br>  onPointerEnter=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;enter&#x27;</span>)&#125; <span class="hljs-comment">// see note 1</span><br>  onPointerLeave=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;leave&#x27;</span>)&#125; <span class="hljs-comment">// see note 1</span><br>  onPointerMove=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;move&#x27;</span>)&#125;<br>  onPointerMissed=&#123;<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;missed&#x27;</span>)&#125;<br>  onUpdate=&#123;<span class="hljs-function">(<span class="hljs-params">self</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;props have been updated&#x27;</span>)&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@react-three/gltfjsx – turns <span class="hljs-title class_">GLTFs</span> into <span class="hljs-variable constant_">JSX</span> components<br>@react-three/drei – useful helpers <span class="hljs-keyword">for</span> react-three-fiber<br>@react-three/postprocessing – post-processing effects<br>@react-three/flex – flexbox <span class="hljs-keyword">for</span> react-three-fiber<br>@react-three/xr – <span class="hljs-variable constant_">VR</span>/<span class="hljs-variable constant_">AR</span> controllers and events<br>@react-three/cannon – physics based hooks<br>@react-three/a11y – accessibility tools <span class="hljs-keyword">for</span> react-three-fiber<br>zustand – state management<br>react-spring – a spring-physics-based animation library<br>react-use-gesture – mouse/touch gestures<br></code></pre></td></tr></table></figure><p>如使用 @react-three&#x2F;drei ，可实现 3d 场景与鼠标移动交互，引入 OrbitControls 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;&gt;<br>  &#123;<span class="hljs-comment">/* 均匀照亮场景中所有元素，可以设置颜色和强度，没有方向 */</span>&#125;<br>  &lt;ambientLight intensity=&#123;<span class="hljs-number">0.5</span>&#125; /&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pointLight</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;[10,</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">10</span>]&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pointLight</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Box</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;[0,</span> <span class="hljs-attr">0</span>, <span class="hljs-attr">0</span>]&#125; /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OrbitControls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">OrbitControls</span>&gt;</span></span><br>&lt;/&gt;<br></code></pre></td></tr></table></figure><h2 id="上手使用-1"><a href="#上手使用-1" class="headerlink" title="上手使用"></a>上手使用</h2><p><a href="https://live.csdn.net/v/237325">实际效果</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useMemo, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Three</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Canvas</span>, useFrame, <span class="hljs-title class_">ThreeElements</span>, useLoader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@react-three/fiber&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Camera</span>, <span class="hljs-title class_">TextureLoader</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">OrbitControls</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@react-three/drei&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Box</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span>&lt;<span class="hljs-title class_">ThreeElements</span>[<span class="hljs-string">&#x27;mesh&#x27;</span>]&gt; = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> ref = useRef&lt;<span class="hljs-title class_">Three</span>.<span class="hljs-property">Mesh</span>&gt;(<span class="hljs-literal">null</span>!);<br>  <span class="hljs-keyword">const</span> [hovered, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [clicked, setClick] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-title function_">useFrame</span>(<span class="hljs-function">(<span class="hljs-params">state, delta</span>) =&gt;</span> (ref.<span class="hljs-property">current</span>.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> += <span class="hljs-number">0.01</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mesh</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#123;<span class="hljs-attr">...props</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">scale</span>=<span class="hljs-string">&#123;clicked</span> ? <span class="hljs-attr">1.5</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;event</span> =&gt;</span> setClick(!clicked)&#125;</span><br><span class="language-xml">      onPointerOver=&#123;event =&gt; setHover(true)&#125;</span><br><span class="language-xml">      onPointerOut=&#123;event =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">boxGeometry</span> <span class="hljs-attr">args</span>=<span class="hljs-string">&#123;[5,</span> <span class="hljs-attr">5</span>, <span class="hljs-attr">5</span>]&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">meshStandardMaterial</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;hovered</span> ? &#x27;<span class="hljs-attr">hotpink</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">orange</span>&#x27;&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mesh</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Sphere</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span>&lt;<span class="hljs-title class_">ThreeElements</span>[<span class="hljs-string">&#x27;points&#x27;</span>]&gt; = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> ref = useRef&lt;<span class="hljs-title class_">Three</span>.<span class="hljs-property">Points</span>&gt;(<span class="hljs-literal">null</span>!);<br>  <span class="hljs-title function_">useFrame</span>(<span class="hljs-function">(<span class="hljs-params">state, delta</span>) =&gt;</span> &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.01</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">points</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">sphereGeometry</span> <span class="hljs-attr">args</span>=<span class="hljs-string">&#123;[6,</span> <span class="hljs-attr">30</span>, <span class="hljs-attr">30</span>]&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sphereGeometry</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">pointsMaterial</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;</span>&#x27;#<span class="hljs-attr">0000ff</span>&#x27;&#125; <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;0.1&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pointsMaterial</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">points</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StarBg</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> ref = useRef&lt;<span class="hljs-title class_">Three</span>.<span class="hljs-property">Points</span>&gt;(<span class="hljs-literal">null</span>!);<br>  <span class="hljs-title function_">useFrame</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> = ref.<span class="hljs-property">current</span>.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> + <span class="hljs-number">0.002</span>;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> bgCount = <span class="hljs-number">10000</span>;<br>  <span class="hljs-keyword">const</span> bgPositions = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> bgPositions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(bgCount * <span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bgCount; i++) &#123;<br>      bgPositions[i * <span class="hljs-number">3</span> + <span class="hljs-number">0</span>] = (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">1000</span>;<br>      bgPositions[i * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>] = (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">1000</span>;<br>      bgPositions[i * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>] = (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">1000</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> bgPositions;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> image = <span class="hljs-title function_">useLoader</span>(<span class="hljs-title class_">TextureLoader</span>, <span class="hljs-string">&#x27;https://lf3-static.bytednsdoc.com/obj/eden-cn/jiheh7nuhboznuhps/shape.PNG&#x27;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">points</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;/* attach=&quot;geometry&quot; 可以省略，用于将对象绑定到父对象上。将几何图形附加到geometry属性 。</span><br><span class="language-xml">          部分可以省略：</span><br><span class="language-xml">          所有以“Material”结尾的原生元素都会收到 attach=&quot;material&quot;，所有以“Geometry”结尾的元素都会收到 attach=&quot;geometry&quot;</span><br><span class="language-xml">      */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">bufferGeometry</span> <span class="hljs-attr">attach</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">geometry</span>&#x27;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">bufferAttribute</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">attach</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">attributes-position</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;bgCount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">array</span>=<span class="hljs-string">&#123;bgPositions&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">itemSize</span>=<span class="hljs-string">&#123;3&#125;</span> //<span class="hljs-attr">每个顶点关联的数组项</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bufferAttribute</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">bufferGeometry</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">pointsMaterial</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">attach</span>=<span class="hljs-string">&quot;material&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;</span>&#x27;#<span class="hljs-attr">8498ca</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;1&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">transparent</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">depthWrite</span>=<span class="hljs-string">&#123;false&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">sizeAttenuation</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alphaMap</span>=<span class="hljs-string">&#123;image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pointsMaterial</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">points</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Star</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span>&lt;<span class="hljs-title class_">ThreeElements</span>[<span class="hljs-string">&#x27;points&#x27;</span>]&gt; = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> ref = useRef&lt;<span class="hljs-title class_">Three</span>.<span class="hljs-property">Points</span>&gt;(<span class="hljs-literal">null</span>!);<br>  <span class="hljs-keyword">const</span> insideColor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Three</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">&#x27;rgb(244, 236, 236)&#x27;</span>);<br>  <span class="hljs-keyword">const</span> outSideColor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Three</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">&#x27;rgba(249, 133, 133, 0.709)&#x27;</span>);<br>  <span class="hljs-keyword">const</span> starCount = <span class="hljs-number">90000</span>;<br>  <span class="hljs-keyword">const</span> starR = <span class="hljs-number">0.3</span>;<br>  <span class="hljs-keyword">const</span> spinRadio = <span class="hljs-number">3000</span>;<br>  <span class="hljs-keyword">const</span> [starPositions, starColors] = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> positions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(starCount * <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">const</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(starCount * <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; starCount; i++) &#123;<br>      <span class="hljs-keyword">let</span> randomRRadio = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>      randomRRadio = randomRRadio &lt; <span class="hljs-number">0.5</span> ? (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.3</span> ? randomRRadio + <span class="hljs-number">0.4</span> : randomRRadio) : randomRRadio;<br>      <span class="hljs-keyword">let</span> currentR = starR;<br>      <span class="hljs-comment">//+ ((i % spinRadio) / spinRadio)* currentR</span><br>      <span class="hljs-keyword">let</span> r = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(randomRRadio * <span class="hljs-number">10</span>) * (currentR + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(randomRRadio * <span class="hljs-number">10</span>) * <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">let</span> spinAngle = ((i % spinRadio) / spinRadio) * <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>      positions[<span class="hljs-number">3</span> * i + <span class="hljs-number">0</span>] =<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(spinAngle) * r + (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">0.5</span> + (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.3</span> ? (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">3</span> : <span class="hljs-number">0</span>);<br>      positions[<span class="hljs-number">3</span> * i + <span class="hljs-number">1</span>] = (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">0.08</span> + (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.7</span> ? (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">0.7</span> : <span class="hljs-number">0</span>);<br>      positions[<span class="hljs-number">3</span> * i + <span class="hljs-number">2</span>] =<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(spinAngle) * r + (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">0.5</span> + (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.3</span> ? (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>) * <span class="hljs-number">3</span> : <span class="hljs-number">0</span>);<br><br>      <span class="hljs-keyword">const</span> mixedColor = insideColor.<span class="hljs-title function_">clone</span>();<br>      mixedColor.<span class="hljs-title function_">lerp</span>(outSideColor, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>      colors[<span class="hljs-number">3</span> * i + <span class="hljs-number">0</span>] = mixedColor.<span class="hljs-property">r</span>;<br>      colors[<span class="hljs-number">3</span> * i + <span class="hljs-number">1</span>] = mixedColor.<span class="hljs-property">g</span>;<br>      colors[<span class="hljs-number">3</span> * i + <span class="hljs-number">2</span>] = mixedColor.<span class="hljs-property">b</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [positions, colors];<br>  &#125;, []);<br>  <span class="hljs-title function_">useFrame</span>(<span class="hljs-function">(<span class="hljs-params">state, delta</span>) =&gt;</span> &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> += <span class="hljs-number">0.021</span>;<br>  &#125;);<br>  <span class="hljs-keyword">const</span> image = <span class="hljs-title function_">useLoader</span>(<span class="hljs-title class_">TextureLoader</span>, <span class="hljs-string">&#x27;https://lf3-static.bytednsdoc.com/obj/eden-cn/jiheh7nuhboznuhps/shape.PNG&#x27;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">points</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;[-10,</span> <span class="hljs-attr">-8</span>, <span class="hljs-attr">-80</span>]&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">bufferGeometry</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">bufferAttribute</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">attach</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">attributes-position</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;starCount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">array</span>=<span class="hljs-string">&#123;starPositions&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">itemSize</span>=<span class="hljs-string">&#123;3&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bufferAttribute</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">bufferAttribute</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">attach</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">attributes-color</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;starCount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">array</span>=<span class="hljs-string">&#123;starColors&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">itemSize</span>=<span class="hljs-string">&#123;3&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bufferAttribute</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">bufferGeometry</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">pointsMaterial</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;0.06&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alphaMap</span>=<span class="hljs-string">&#123;image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">transparent</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">depthWrite</span>=<span class="hljs-string">&#123;false&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">vertexColors</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">sizeAttenuation</span>=<span class="hljs-string">&#123;true&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pointsMaterial</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">points</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">FiberDemo</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [renderFiber, setRenderFiber] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getFiber</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">switch</span> (renderFiber) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sphere&#x27;</span>:<br>        <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Sphere</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Sphere</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/&gt;</span></span><br>        );<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;star&#x27;</span>:<br>        <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Star</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Star</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">StarBg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">StarBg</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">OrbitControls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">OrbitControls</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/&gt;</span></span><br>        );<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;box&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;default&#x27;</span>:<br>        <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            &#123;/* 均匀照亮场景中所有元素，可以设置颜色和强度，没有方向 https://threejs.org/docs/#api/en/lights/AmbientLight */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ambientLight</span> <span class="hljs-attr">intensity</span>=<span class="hljs-string">&#123;0.5&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">pointLight</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;[10,</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">10</span>]&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pointLight</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Box</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;[0,</span> <span class="hljs-attr">0</span>, <span class="hljs-attr">0</span>]&#125; /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">OrbitControls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">OrbitControls</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/&gt;</span></span><br>        );<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">height:</span> &#x27;<span class="hljs-attr">100</span>%&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width:</span> &#x27;<span class="hljs-attr">100</span>%&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">inline-block</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">border:</span> &#x27;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> <span class="hljs-attr">grey</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">background:</span> &#x27;<span class="hljs-attr">black</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">100</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">sphere</span>&#x27;, &#x27;<span class="hljs-attr">box</span>&#x27;, &#x27;<span class="hljs-attr">star</span>&#x27;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;renderFiber&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;v</span> =&gt;</span> setRenderFiber(v)&#125;</span><br><span class="language-xml">      &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Canvas</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">height:</span> <span class="hljs-attr">1000</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">camera</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">position:</span> [<span class="hljs-attr">0</span>, <span class="hljs-attr">0</span>, <span class="hljs-attr">20</span>],</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;&gt;</span>&#123;getFiber()&#125;<span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Canvas</span>&gt;</span></span><br>    &lt;/div&gt;<br>  );<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h1><ul><li>多看效果例子</li><li>需要对 3d 空间坐标物体坐标、朝向等有抽象认识</li><li>如果有复杂运动，需要把运动物体的运动规律转化为几何运算</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
